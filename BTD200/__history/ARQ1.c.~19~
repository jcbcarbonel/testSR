#include <18F87K22.h>
#device adc=12
#device PASS_STRINGS = IN_RAM

#FUSES WDT_SW, WDT32768, INTRC_IO, SOSC_HIGH, NOPROTECT, NOIESO, BROWNOUT, PUT, NOCPD, STVREN, NODEBUG, NOWRT, NOWRTD, NOEBTR, NOCPB, NOEBTRB, NOWRTC, NOWRTB, FCMEN, NOXINST, MCLR, RTCOSC_T1
#use delay(clock=16000000)

#use rs232(baud=57600, xmit=PIN_G1, rcv=PIN_G2, stream=PC)
#use rs232 (baud=19200, xmit=PIN_C6, rcv=PIN_C7, stream=SERIAL_INT)
#use i2c(MASTER, sda=PIN_D5, scl=PIN_D6)
//#include "bootloader.h"

#include <math.h>
#include <stdlib.h>
#include <string.h>


#define INTERNAL_LED_STAT

#case

#define BUFFER_SIZE      255

unsigned char const FIRMWARE[] = {"v.2.8.1"};

char SENSORTYPE=NULL;
char SERVERNUMBER[15]={};
char SERVERIP[15]={};
char funcReturnVar[BUFFER_SIZE]={};
char FROMSERIALPC[25]={};
char REALDATA[BUFFER_SIZE];



#include <headers.c>
#include <rtc.c>
#include <pinDefinitions.c>
#include <dualcolorLED.c>
#include <eeprom_.c>
#include <voltageDetails.c>
#include <gsm.c>
#include <generic.c>
#include <interrupSerial.c>
#include <interruptSerial2.c>
#include <flashmem_spi.c>
#include <dateTimeDetails.c>
#include <satellite.c>
#include <handleUnsent.c>
#include <gprs.c>
#include <debugMode.c>
#include <powerSaving.c>
#include <usingAstiConfigTool.c>
#include <firmware2flash.c>
#include <interruptTimer1.c>
#include <sensors/shtTempHum.c>
#include <sensors/vaisalaWXT520.c>
#include <sensors/waterSenix.c>
#include <sensors/pressure_scp.c>
#include <sensors/rainTipping.c>
#include <sensors/sunshineDuration.c>
#include <sensors/rs485.c>
#include <sensors/hmp155.c>
#include <sensors/smp3_A.c>
#include <sensors/ptb330.c>
#include <sensors/maxbotix.c>
#include <sensors/WL450.c>

void urbanDate()
{
   
   char strx[25]={};
   char token[3]={};
   char *ptr;
   char year_[3]={};
   char month_[3]={};
   char day_[3]={};
   char hour_[3]={};
   char min_[3]={};
   char sec_[3]={};
   int cntx=0;

   strcpy(token,":");
   
   GetDateTime();
   strcat(strx,funcReturnVar);
   ptr=strtok(strx,token);
   strcpy(year_,ptr);
   while(ptr!=0)
   {
      ptr = strtok(0,token);
      cntx++;
      if (cntx==1)
         strcpy(month_,ptr);
      if (cntx==2)
         strcpy(day_,ptr); 
      if (cntx==3)
         strcpy(hour_,ptr);
      if (cntx==4)
         strcpy(min_,ptr);
      if (cntx==5)
         strcpy(sec_,ptr);
   }
   sprintf(funcReturnVar,"%s%s%s/%s%s%s",year_,month_,day_,hour_,min_,sec_);
}


void rainUrbanFormat()
{
   char cntx_[4]={};
   char cumx_[4]={};
   
   GetRainCount_TIPPING();
   strcpy(cntx_,funcReturnVar);
   RainCum_TIPPING_func();
   strcpy(cumx_,funcReturnVar);
   
   sprintf(funcReturnVar,"PN1A:%s,%s",cntx_,cumx_);
}


void sensorPoll()
{
   char charx='+';
   char tempStorage[50]={};
   char temp1[20]={};
   
   //IMEI:test+GW1A:104,31.33+PN1A:0,33:H1:33.3,75.7,21,4.1S,1.15,0.00,1901,140928/200622
   enableBOOST1();
   delay_ms(1500);
   gsnId();
   sprintf(REALDATA,"IMEI:%s+",funcReturnVar);
   if (strchr(SENSORCONFIG,'P'))
   {  
      initWL450();
      readWL450Pressure();
      strcpy(temp1,funcReturnVar);
      readWL450Temp();
      sprintf(tempStorage,"GW1A:%s,%s",temp1,funcReturnVar);
      strcat(REALDATA,tempStorage);
      strncat(REALDATA,&charx,1);
   }      
   
   if (strchr(SENSORCONFIG,'W'))
   {
      getDistance_MBotix();
      sprintf(tempStorage,"MX1A:%s",funcReturnVar);
      strcat(REALDATA,tempStorage);
      strncat(REALDATA,&charx,1);
   }      
   
   if (strchr(SENSORCONFIG,'R'))
   {
      rainUrbanFormat();
      strcat(REALDATA,funcReturnVar);
      strncat(REALDATA,&charx,1);
   }
   
   //----    
   logger_health_status();
   sprintf(tempStorage,"H1:%s",funcReturnVar);
   strcat(REALDATA,tempStorage);
   

//---- add flashpage to data sent
   itoa(DTFPageCnt,10,funcReturnVar);
   sprintf(tempStorage,",%s,",funcReturnVar);
   strcat(REALDATA,tempStorage);
//---- get Real time clock
   disableBOOST1();
   urbanDate();
   strcat(REALDATA,funcReturnVar);
   fprintf(PC,"*+%s\n",REALDATA);
}


void header()
{
   fprintf(PC,"ADVANCED SCIENCE AND TECHNOLOGY INSTITUTE\n");
   fprintf(PC,"EMBEDDED SYSTEMS TECHNOLOGIES\n");
   fprintf(PC,"ARQ FIRMWARE v.3.0 2015\n");
}

void sensorPinIniState()
{
   disableBOOST1();
}

void SensorInitialize()
{
   disableBOOST1(); 
   RAINCOUNT_TIPPING=0;
   clearRainCumVars();      
}

void setInitialValues()
{
   char strx[20]={};
   char forDeploy;
   // -- > default users
   
   readDataEEprom(3);
   strcpy(strx,funcReturnVar);
   SENDING_TIME = atoi(strx);
   fprintf(PC,"sending=%i\n",SENDING_TIME);
   
   readDataEEprom(11);
   strcpy(SERVERNUMBER,funcReturnVar);
   fprintf(PC,"server no.=%s\n",SERVERNUMBER);
   
   readDataEEprom(5);
   strcpy(strx,funcReturnVar);
   fprintf(PC,"password=%s\n",strx);
   
   readDataEEprom(14);
   strcpy(SENSORCONFIG,funcReturnVar);
   fprintf(PC,"SENSORCONFIG=%s\n",SENSORCONFIG);
   
   //BATTERYUSED = readCharEE(346);
   BATTERYUSED=0;
   fprintf(PC,"battery=%i\n",BATTERYUSED);
   
   readDataEEprom(6);
   strcpy(SERVERIP,funcReturnVar); // get server ip
   fprintf(PC,"SERVERIP=%s\n",SERVERIP);
   
   readCharEE(351, forDeploy);  // for deploy
   if (forDeploy=='Y')
      findEndChar();
   else
      fprintf(PC,"TESTING MODE..\n");

}


void main(){
   char strx[20] = {};
   char *msgP1=NULL;
   char mRestartNum[15]={};
   int1 unsentCnt=0;
   int1 whilex=0;
   int1 statGprs=0;
   
   delay_ms(2000);
   bootloadFlag();

   setup_adc(ADC_CLOCK_DIV_16);
   setup_adc_ports(sAN0 | sAN4 | sAN5 | sAN7 | sAN8 | sAN12 | sAN13 | sAN14 | sAN15); 
   
   setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1|T1_ENABLE_SOSC); //no T1_CLK_OUT
   setup_spi(SPI_MASTER|SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_64);
   port_d_pullups(01100000);
   
   setup_wdt(WDT_ON);
   enable_interrupts(INT_TIMER1);
   enable_interrupts(INT_RDA);
   enable_interrupts(INT_RDA2);
   enable_interrupts(INT_EXT); //B0
   enable_interrupts(INT_EXT1); //RING OUT
   enable_interrupts(GLOBAL);
   //enable_interrupts(INT_EXT3); //B3
   
   ext_int_edge(0,L_TO_H);
   //ext_int_edge(3,L_TO_H);
   
   ledConfig(LED_GREEN);
   header();
   
   
   //----------------- REGISTER DEFAULT NUMBERS
   AddDataEEprom("09334556445",1);
   AddDataEEprom("09178747367",1);
   //AddDataEEprom("202.90.158.12",6);
   
   //----------------- GSM INITIALIZATION
   InitGSM();
   InitICP(0);
   RealTime_acquire();
   clear_buffer();
   clear_inputs(); //delete messages from inbox
   
   sht_init(); // initialize sht module
   
   DTFOpen();   // initialize flash
   SetSizeFT();
   
   setInitialValues(); // initialize config settings
   SensorInitialize();
   
   
   //----------------watch dog timer-----------------
   switch ( restart_cause() )
   {
      case WDT_TIMEOUT:
      {
         strcpy(DESIRED_RESPONSE, "+CCLK: ");
         clear_buffer();
         fprintf(SERIAL_INT,"AT+CCLK?\r");
         delay_ms(200);
         msgP1 = GetResponse();
         if (msgP1)
            strcpy(strx,"WATCHDOG TIMEOUT");
         break;
      }
      
      case NORMAL_POWER_UP:
      {
         strcpy(strx,"NORMAL POWER UP!");
         break;
      }
      
      case RESET_INSTRUCTION:
      {
         readDataEEprom(10);
         strcpy(mRestartNum,funcReturnVar);
         strcpy(strx, "SMS RESET by ");
         strcat(strx, mRestartNum);
         break;
      }
      default:
      {
         strcpy(strx,"MANUAL RESET");
      }
   }
   clear_buffer();
   delay_ms(200);
   fprintf(PC,"%s\n",strx);
   fprintf(SERIAL_INT,"%s\n",strx);
   strcpy(SMS_TOBE_SENT,strx);
   SendSMS(SERVERNUMBER);   
//-----------------    
   delay_ms(500);
   SAMPLINGFLAG=0;
   do{
      restart_wdt();
      whilex=0;
      if (INTSERIAL2_FLAG==1)
      {
         delay_ms(200);
         RXD2_DATA[WRITE2_CNTR-1]='\0';
         if (!stricmp(RXD2_DATA,"debug"))
         {
            clear_buffer2();
            whilex=1;
            debugMenu();
            while(whilex==1)
            {
               if (debugDetails())
                  whilex=0;
            }
         }
         clear_buffer2();
      }
      else
      {
         if (POWERSAVING == 2)
            ledConfig(LED_OFF);
         else
            ledToggle();
         
         
         delay_ms(500);
         if (EXT_FLAG==1)
         {
            clear_buffer();
            strcpy(RXD_DATA,SMS_RCV);
            WRITE_CNTR = strlen(RXD_DATA);
            proc_receive();
            delay_ms(200);
            EXT_FLAG=0;
         }
         
         if (TESTFLAG==TRUE)
         {
            if (DEBUGMODE != NO_USB)
               PowerSavingIdentify(); // power saving check
               
            if (POWERSAVING != 2)
            {
               if(!testGSM())
               {
                  ledConfig(LED_OFF);
                  InitGSM();
               }
            }
            TESTFLAG=FALSE;
         }
   
         if (SYNCFLAG==TRUE)
         {
            if (POWERSAVING != 2)
            {
               fprintf(PC,"Time Sync\n");
               SYNCFLAG = FALSE;
               RealTime_acquire();
            }
         }
         
         if (SUNSHINE_RESET_FLAG==TRUE)
         {
            SUNSHINE_RESET_FLAG=FALSE;
            sunshineReset();
         }
         
         if (SAMPLINGFLAG == TRUE)
         {
            ledConfig(LED_GREEN);
            counterNewYear();
            SAMPLINGFLAG = FALSE;
            
            if (unsentCnt != 0) //check if there are failed messages
            {
               unsentCnt = findUnsentAndSend(0, unsentDTFByteCnt, unsentDTFPageCnt);
            }
            clear_buffer();
            delay_ms(200);
            
            sensorPoll();
            strcpy(SMS_TOBE_SENT, REALDATA);
            
            statGprs = openConGprs();
            if (statGprs == 1)
            {
               statGprs = sendGPRS(strlen(REALDATA),REALDATA);
               closeCon();
            }               
            if (statGprs == 0)
            {
               if (!AttemptToSend())
               {
                  if (unsentCnt!=1)
                  {
                     unsentCnt=1;
                     unsentDTFPageCnt=DTFPageCnt;
                     unsentDTFByteCnt=DTFByteCnt;
                  }                  
                  fprintf(PC,"MESSAGE SENT FAILED\n");
                  //satelliteSend();   ----> to be removed
               }
            }               
            if (GPRS_FIRMWARE_STATUS != 1)
               DTFWriteToFlash(SMS_TOBE_SENT,strlen(SMS_TOBE_SENT),0);
         }
         if (RESETFLAG==TRUE)
         {
            RESETFLAG=FALSE;
            clearRainCumVars();
         }
      }         
   }while(1);
}

