//Author: Glenn Vincent Lopez
//May 11, 2022

#include <18F87K22.h>
#device adc=12
//#device icd=true
#FUSES WDT_SW, WDT32768, INTRC_IO, SOSC_HIGH, NOPROTECT, NOIESO, BROWNOUT, PUT, NOCPD, STVREN, NODEBUG, NOWRT, NOWRTD, NOEBTR, NOCPB, NOEBTRB, NOWRTC, NOWRTB, FCMEN, NOXINST, MCLR, RTCOSC_T1
#use delay(clock=16000000)

#use spi(MASTER, FORCE_HW, SPI1, MODE=1, BITS=8)
#use i2c(MASTER, sda=PIN_D5, scl=PIN_D6)
//#use rs232(ICD)     
//!#use rs232(xmit=PIN_B6, rcv=PIN_B7. stream=ICD)
//#use rs232(baud=57600, xmit=PIN_B7, rcv=PIN_B6, stream=ICD)

#include <math.h>
#include <stdlib.h>
#include <string.h>


//#include <bootloader.h>
//#IMPORT (FILE=bootloader/arQ1010_BootLoader_v1.hex,HEX,RANGE=0:LOADER_SIZE)

#include <arQ1010/globalVariables.h>

#include <arQ1010/pinDefinitions.c>
#include <arQ1010/interruptSerial2_USB.c>
#include <arQ1010/InterruptSerial1_GSM.c>
#include <arQ1010/interruptExt1_GSM.c>
#include <arQ1010/interruptExt2_IN2.c>
#include <arQ1010/dualColorLED.c>
#include <arQ1010/gsm.c>
#include <arQ1010/interruptTimer1.c>

#include <arQ1010/rtc.c>
#include <arQ1010/dateTimeDetails.c>
#include <arQ1010/debugmode.c>


#include <sensors/as3935.c>
#include <sensors/pressure_scp.c>

void mcuStatusOnStartUp()
{
   char strx[20] = {};
   char *msgP1=NULL;
   
   int cause;
   
   cause=restart_cause();
   switch ( cause )
   {
      
      case WDT_TIMEOUT: //7
      { 
          strcpy(strx,"WATCHDOG TIMEOUT");
          break;
      }
      
      case NORMAL_POWER_UP: //12 after upload of firmware
      {
         strcpy(strx,"FRESH POWER UP!");
         break;
      }
      
      case RESET_INSTRUCTION: //0
      {
//!         readDataEEprom(EEPROM_RESET_NUMBER);
         strcpy(strx, "SOFTWARE RESET-");
         strcat(strx, funcReturnVar);
         break;
      }
      
      case MCLR_FROM_RUN:    //15
      {
          strcpy(strx,"HARDWARE RESET");
          break;
      }
      
      default:
      {
         sprintf(strx, "OTHER RESET CAUSE (%i)", cause );
      }
   }
   
//!   fprintf(USB,"%s\n",strx);
//!   strcpy(SMS_TOBE_SENT,strx);
   
   sprintf(SMS_TOBE_SENT, "%s - %s", tmp1, getMcuDateTime()); //getDateTime()
                  
   AttemptToSend();
   
}

//char xxx[255]={};
void main()
   {
    char dbg[6]="debug";
    char reset[6]="reset";
    char *ptr=NULL;
    
   delay_ms(1000);
   
   
   fprintf(USB, "*************************************************\n");
   fprintf(USB, "ULAT Lightning Monitoring Station (Beta version)\n");
  
//!   while(1)
//!      {printf("ICD\n");
//!       delay_ms(1000);
//!      }
//!   
//!   
   enable_interrupts(INT_TIMER1); // enable timer1 interrupt, through the use of the 32 khz oscillator, it will be triggered every second   
   enable_interrupts(INT_RDA);    // hardware UART interrupt, used by Radio/GSM module
   enable_interrupts(INT_RDA2);   // hardware UART interrupt, used by USB through RS232 interface via the USB port
   enable_interrupts(INT_EXT);    // B0 used by rain gauge
   enable_interrupts(INT_EXT1);   // RING OUT - will be triggered once a call or text is received by the gsm module
   enable_interrupts(INT_EXT2);   // Interrupt 2 is triggered when there is interrupt signal from the AS3935
   enable_interrupts(GLOBAL);     // main switch for all the interrupts
 
   ext_int_edge(2,H_TO_L);         // configure INT2 state change to trigger interrupt 2  
   
   setup_wdt(WDT_ON);  // enable watch dog
   
   setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1|T1_ENABLE_SOSC); //no T1_CLK_OUT
   
   setup_spi(SPI_MASTER |SPI_L_TO_H | SPI_XMIT_H_TO_L | SPI_CLK_DIV_64);  // Working with AS3935, set as default
   delay_ms(100);
   Thunder_Init();
    
   InitGSM();                      // initialize GSM
//!   delay_ms(2000);
   rtc_acquire_sync();             // sync datetime from rtc chip to both GSM and MCU
   
//!   while (try<3)//initialize AS3935 Lightning sensor
//!      {if(!Thunder_Init())
//!         {
//!          try++;
//!          fprintf(USB, "AS3935 Error - try %i\n",try);
//!          
//!          if (try==3)
//!            {fprintf(USB, "AS3935 Initialization failed");}
//!          
//!         }
//!       else
//!         {
//!          fprintf(USB, "AS3935 Initiatized\n");
//!          break;
//!         }
//!      }


   //output_low(PIN_F5); //disable CS of on Board Flash Memory
   
//!   setup_spi(SPI_MASTER |SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_64);  // Working with pressure module
//!   getPressureReadings();
//!   fprintf(USB,"Pressure: %s\n", funcReturnVar); 
//!
   InterruptInput2_Flag=0;
   clear_InterruptUSB();
   //setup_spi(SPI_MASTER |SPI_L_TO_H | SPI_XMIT_H_TO_L | SPI_CLK_DIV_64);  // Working with AS3935
   
   strcpy(SERVERNUMBER,"639175370216");
   SENDING_TIME = 60;
   
   mcuStatusOnStartUp(); // function determines cause of MCU restart
   
   while(1)
      { restart_wdt();
      
        if (InterruptInput2_Flag) //interrupt signal from AS3935
        {  //ledConfig(LED_GREEN);
        
           // We read the AS3935 registers to see what caused the interrupt
           delay_ms(2);   // 2ms delay between interrupt and reading of register 0x03
           
           interrupt_source = Thunder_Read(0x03) & 0x0F; // Read the 0x03 register of AS3935 which stores interupt codes
           //fprintf(USB, "Interrupt : %i - ",interrupt_source);
           delay_ms(2);
           
           switch (interrupt_source) 
               {
      
               case 1:  //noise level too high
                  fprintf(USB,"AS3935: Noise Detected\n");
                  //delay_ms(2000);
                  break;
             
               case 4:  //Disturber Detected
                  fprintf(USB,"AS3935: Disturbers Detected\n");
                  //delay_ms(2000);
                  break;
      
               case 8:  // is lightning
                  ledConfig(LED_GREEN);
                  //fprintf(USB,"Lightning detected - ");
//!               Total_Lightings_Detected++;
//!               if(Total_Lightings_Detected > 100)
//!                  {Total_Lightings_Detected =0;
//!                  }
               
                  // now we get the distance to the lightning event
                  tmp1 = Thunder_Read_distance();
                  //fprintf(USB,"Lightning detected within %u Km\n", tmp1);
                  
                  ptr=getMcuDateTime();
                  //fprintf(USB,"ptr: %s\n", ptr);
                  
                  sprintf(SMS_TOBE_SENT, "Lightning within %i Km %s", tmp1, ptr); //getDateTime()
                  fprintf(USB,"%s\n", SMS_TOBE_SENT);
                  
                 
                  AttemptToSend();
                  //SendSMS(SERVERNUMBER);
            
//!                  setup_spi(SPI_MASTER |SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_64);  // Working with pressure module
//!                  getPressureReadings();
//!                  strcat(funcReturnVar,'+');
//!                  //strcat(funcReturnVar,tmp1);
//!                  fprintf(USB,"Pressure: %s\n", funcReturnVar);
//!                  setup_spi(SPI_MASTER |SPI_L_TO_H | SPI_XMIT_H_TO_L | SPI_CLK_DIV_64);  // Working with AS3935


//!            
                  break;  
               }
         
            InterruptInput2_Flag = 0;
      }
       
      if (InterruptUSB_Flag==1)              // if there is a character from USB, the interrupt will trigger            
      {  //delay_ms(100);
                 
         InterruptUSB_Rxd[InterruptUSB_Counter-1]='\0';
         //fprintf (USB, "Int Ser 2 USB: %s\n", InterruptUSB_Rxd);
         
         //ptr= strlwr(INTSERIAL2USB_RXD); // change input to lowercase
         //fprintf (USB, "ptr: %s\n", ptr);
         
         //getDataFromUSB();
         
         if (!stricmp(InterruptUSB_Rxd,dbg )) // if data from USB = debug, it will go into debug mode.
         {
            ledConfig(LED_GREEN);
            fprintf(USB,"DEBUG MODE");
            debugDetails();
//!            whilex=1;
//!            debugMenu();
//!            while(whilex==1)
//!            {
//!               if (debugDetails())
//!                  whilex=0;
//!            }
         }
         
         else if (!stricmp(InterruptUSB_Rxd,reset )) // if data from USB = debug, it will go into debug mode.
         {
            ledConfig(LED_GREEN);
            fprintf(USB,"Reset MCU\n");
            delay_ms(50);
            reset_cpu();
         }
         
         
         clear_InterruptUSB();
      }
        
      else  
       { // nothing happens in otherwords no interrupts
            if (SAMPLINGFLAG == TRUE)
               {
               ledConfig(LED_GREEN);
               
//!               readRtc(0);
//!               getMcuDateTime();
               SAMPLINGFLAG = FALSE;
               }
            
            if (SYNCFLAG==TRUE)                 
               {
               ledConfig(LED_GREEN);
               fprintf(USB,"Time Sync\n");
               SYNCFLAG = FALSE;             // two minutes before reaching the next hour, this will be activated
               rtc_acquire_sync();           // sync rtc datetime to both mcu and gsm 
               //Thunder_Init();
               }
            
            ledToggle(LED_GREEN);
            delay_ms(500);
            
            
            
            
       }
      }
   }  //end of main()


