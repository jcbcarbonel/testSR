void flashRoutineSpi(int1 buffer)
{
   if (buffer == 0)
      spi_write(0xD4);
    else
      spi_write(0xD6);
    
    //--- 8 Dont'care Byte
    spi_write(0x00);
    //--- High Byte address
    spi_write(0x00);
    //--- Low Byte address
    spi_write(0x00);
    //--- 8 Dont'care Byte
    spi_write(0x00);
}

int1 extractLastChar_(int16 PageNum,int1 buffer,int16 & btCnt)
{
   char  TxBuffer;
   int16 ByteCnt=0;
   int1 foundBl=0;
   
   output_high(SCP_CSB);
   DTFPageToRam(PageNum, buffer);
   while (!DTFIsReady());
   //--- Initialisation
   DTFSelect();
 
   flashRoutineSpi(buffer);
    
    do {
        TxBuffer = spi_read(0);
        if (TxBuffer == '~')
        {
            foundBl=1; 
            break;
        }          
    } while (ByteCnt++<(DTFPageSize-1));
    //--- Unselect
    DTFUnSelect();
    btCnt = ByteCnt;
    
    return foundBl;
    
}

//void addtestDataToFlash()
//{}

/*
void addtestDataToFlash()
{
   int x=0;
   DTFPageCnt=4094;
   DTFByteCnt=0;
   for (x=0;x<=70;x++)
   {
      sprintf(funcReturnVar,"thequickbrownfoxjumpsover:%i",x);
      fprintf(PC,"%s\n",funcReturnVar);
      fprintf(PC,"DTFPageCnt=%lu\n",DTFPageCnt);
      fprintf(PC,"DTFByteCnt=%lu\n",DTFByteCnt);
      fprintf(PC,"--------------------\n");
      DTFWriteToFlash(funcReturnVar,strlen(funcReturnVar),0);
      fprintf(PC,"DTFPageCnt_AFTER=%lu\n",DTFPageCnt);
      fprintf(PC,"DTFByteCnt_AFTER=%lu\n",DTFByteCnt);
   }
}
*/


int1 checkUnsentStatus()
{
   if ((unsentDTFPageCnt == DTFPageCnt) && (unsentDTFByteCnt == DTFByteCnt))
      return 1;
   else
      return 0;
            
}


int sendFlashDataViaSMS(int1 buffer, char *startPage, char *endPage)
{
   char msgx[158] = {};
   char  TxBuffer;
   int16 ByteCnt=0;
   int16 x = 0;
   int16 yy=0;
   int counter=0;
   float batcheck=0;
   
   int16 endpx=0;
   int16 startpx=0;
   
   
   startpx = atol(startPage);
   endpx = atol(endPage);
   
//!   if (startpx > endpx)
//!      return 0;
//!   counter = endpx - startpx;
//!   if (counter > 10)
//!      return 0;
//!   batcheck = batAdc();      
//!   if (batcheck < 3.8)
//!      return 1;
   
   for (x=startpx;x<=endpx;x++)
   {
      restart_wdt();
      DTFPageToRam(x, buffer);
      while (!DTFIsReady());
      //--- Initialisation
      DTFSelect();
      
      flashRoutineSpi(buffer);
      ByteCnt=0;
      do
      {
         ByteCnt++;
         TxBuffer = spi_read(0);
         if (TxBuffer == '^')
         {
            msgx[yy] = '\0';
            strcpy(SMS_TOBE_SENT, msgx);
            fprintf(PC,"msgx: %s\n",msgx);

            if (!AttemptToSend())
            {
               DTFUnSelect();
               return 2;
            }
            else
               yy=0;
            
         }
         else if (TxBuffer == '~')
         {
            DTFUnSelect();
            return 3;
         }
         else
         {
            msgx[yy++] = TxBuffer;
            if (yy >158)
            {
               AttemptToSend();
               DTFUnSelect();
               return 4;
            }               
         }
      }while (ByteCnt<(DTFPageSize));
      DTFUnSelect();
      //--- Unselect
   }
   return 5;
}

int1 findUnsentAndSend(int1 buffer, int16 byteCnt, int16 startPage)
{
   char msgx[158] = {};
   int1 checkEnd=0;
   
   char  TxBuffer;
   int16 ByteCnt=0;
   int checkx=0;
   int16 x = 0;
   int16 yy=0;
   int16 endpx=0;
   int16 startpx=0;
   int counter=0;
   
   int1 initialStartOfPage=0;
   
   checkx = checkUnsentStatus();  
   if (checkx==1)
      return 0; // unsentByte and Byte is the same
   
   startpx = startPage;
   endpx = DTFPageCnt;
   
      
   
   if (startpx > endpx)
   {
      checkEnd = TRUE;
      endpx = DTFNbrPage;
   }
choyx:   
   for (x=startpx;x<=endpx;x++)
   {
      restart_wdt();
      DTFPageToRam(x, buffer);
      while (!DTFIsReady());
      //--- Initialisation
      DTFSelect();
      
      flashRoutineSpi(buffer);
      
      ByteCnt=0;
      
      if (initialStartOfPage==0)
      {
         initialStartOfPage=1;
         do
         {
            TxBuffer = spi_read(0);
         }while(ByteCnt++<(byteCnt-1));
      }
      
      do
      {
         ByteCnt++;
         TxBuffer = spi_read(0);
         if (TxBuffer == '^')
         {
            msgx[yy] = '\0';
            strcpy(SMS_TOBE_SENT, msgx);
            fprintf(PC,"msgx: %s\n",msgx);
            
            //yy=0;
            //unsentDTFPageCnt=x;
            //unsentDTFByteCnt=ByteCnt;
            
            
            if (!AttemptToSend())
            {
               DTFUnSelect();
               return 1;
            }
            else
            {
               yy=0;
               unsentDTFPageCnt=x;
               unsentDTFByteCnt=ByteCnt;
            }
  
            if (counter++ > 20)
            {
               DTFUnSelect();
               return 1;
            }               
         }
         else if (TxBuffer == '~')
         {
            DTFUnSelect();
            return 0;
         }
         else
         {
            msgx[yy++] = TxBuffer;
            if (yy >158)
            {
               unsentDTFPageCnt=DTFPageCnt;
               unsentDTFByteCnt=DTFByteCnt;
               DTFUnSelect();
               return 1;
            }               
         }
      }while (ByteCnt<(DTFPageSize));
      DTFUnSelect();
      //--- Unselect
   }
   if (checkEnd==TRUE)
   {
      checkEnd=FALSE;
      startpx=0;
      endpx = atol(DTFPageCnt);
      goto choyx;
   }
   DTFUnSelect();
}

void findEndChar()
{
   int16 bytecnt_ = 0;
   int16 x=0;
   int1 fndBl=0;
   
   for (x=0;x<=DTFNbrPage;x++)
   {
      fprintf(PC,"searching page=%lu\n",x);
      fndBl = extractLastChar_(x,1,bytecnt_);
      if (fndBl == 1)
         break;
      if (INTSERIAL2_FLAG==1)
      {
         fprintf(PC,"in here..");
         delay_ms(200);
         RXD2_DATA[WRITE2_CNTR-1]='\0';
         if (!stricmp(RXD2_DATA,"stop"))
         {
            DTFPageCnt = 0;
            DTFByteCnt = 0;
         }
         clear_buffer2();
         break;
      }         
   }
   if (fndBl == 1)
   {
      DTFPageCnt = x;
      DTFByteCnt = bytecnt_;
   }
   else
   {
      DTFPageCnt = 0;
      DTFByteCnt = 0;
   }
   fprintf(PC,"DTFPageCnt=%lu\n",DTFPageCnt);
   fprintf(PC,"DTFByteCnt=%lu\n",DTFByteCnt);
}   
