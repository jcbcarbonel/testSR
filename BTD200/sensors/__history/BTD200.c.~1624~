
//#use rs232 (baud=9600, parity=e, bits=8, stop=1, xmit=PIN_E4, rcv=PIN_E7, stream=RS485_GDAT1)
//char strBTD[100]={};
//#use rs232(baud=57600, xmit=PIN_G4, rcv=PIN_G3, stream=RS232_BTD200)
//#use rs232(baud=57600, xmit=TX_USB, rcv=RX_USB, stream=USB)

 char message[255]={};

void btdStatus(w){
   //char recon;
  
   switch (w){
      case 1:
         fprintf(USB,"\nLightning Detected!!!\n******************************************************************************************************************************************************");
         sprintf(message, "FC:%i+%sGS:*+BT:%s+DT:*\r", flashCount[0], BTDLaLo, biralBT); 
         fprintf(USB, "SMS to Sent: %s", message);
         sendToLTE(message);
         strcpy(BTDLaLo, "");   
         
         getMcuDateTime();
         strcpy(biralBT, strDateTime);
         fprintf(USB, "Date-Time: %s\n", biralBT);
         
         strcpy(strDateTime, ""); 
         strcpy(biralBT, ""); 
         
         fprintf(USB, "\n");
         break;
      
      case 2:
         //fprintf(USB, "\nTest switch"); 
         strcpy(strBTD_con, "BTDrecon\r");
         sprintf(message, "%s", strBTD_con); 
         fprintf(USB, "SMS to Sent: %s", message);
         sendToLTE(message);
         strcpy(strBTD_con, "");
         
         getMcuDateTime();
         strcpy(biralBT, strDateTime);
         fprintf(USB, "Date-Time: %s\n", biralBT);
         
         strcpy(strDateTime, ""); 
         strcpy(biralBT, ""); 
         
         fprintf(USB, "\n");
         //fprintf(USB, "\nTest end of switch"); 
         break;  
         
      case 3:
         strcpy(strBTD_con, "BTDcon\r");
         sprintf(message, "%s", strBTD_con); 
         fprintf(USB, "SMS to Sent: %s", message);
         sendToLTE(message);
         strcpy(strBTD_con, "");
         
         getMcuDateTime();
         strcpy(biralBT, strDateTime);
         fprintf(USB, "Date-Time: %s\n", biralBT);
         
         strcpy(strDateTime, ""); 
         strcpy(biralBT, ""); 
         
         fprintf(USB, "\n");
         //fprintf(USB, "\nTest end of switch"); 
         break;
         
     case 4:
         strcpy(strBTD_con, "BTDstable\r");
         sprintf(message, "%s", strBTD_con); 
         fprintf(USB, "SMS to Sent: %s", message);
         sendToLTE(message);
         strcpy(strBTD_con, "");
                  
         getMcuDateTime();
         strcpy(biralBT, strDateTime);
         fprintf(USB, "Date-Time: %s\n", biralBT);
         
         strcpy(strDateTime, ""); 
         strcpy(biralBT, ""); 
         
         fprintf(USB, "\n");
         //fprintf(USB, "\nTest end of switch"); 
         break;
         
      case 5:
         strcpy(strBTD_con, "BTDcon\r");
         sprintf(message, "%s", strBTD_con); 
         fprintf(USB, "SMS to Sent: %s", message);
         sendToLTE(message);
         strcpy(strBTD_con, "");
           
         
         getMcuDateTime();
         strcpy(biralBT, strDateTime);
         fprintf(USB, "Date-Time: %s\n", biralBT);
         
         strcpy(strDateTime, ""); 
         strcpy(biralBT, ""); 
         
         fprintf(USB, "\n");
         //fprintf(USB, "\nTest end of switch"); 
         break;   
         
      default:
         break;    
   }
   fprintf(USB, "\n"); 
} 


int readData(a, b, c, d, e, f){
   int sendResponse;
   //fprintf(USB, "\nTest readeData"); 
   
   if (a==0x0a && b==0x00 && c==0x20 && d==0x00 && e==0x21){
      
      //fprintf(USB, "\n\nBTD Request to Connect: ");
      //getMcuDateTime();
      //fprintf(USB, "\nBTD Requesting to Connect");
      sendResponse = 1;
      break;
   }
   
   else if (a==0x10 && b==0x00 && c==0x20 && d==0x00 && e==0x01){ 
      fprintf(USB, "\n");
      strcpy(btdCode, "RMS*");
      //fprintf(USB, "\n\nBTD Request Module Status: ");
      sendResponse = 2;
      break;
   }
   
   else if (a==0x37 && b==0x00 && c==0x20 && d==0x00 && e==0x02){
      
      //fprintf(USB, "\n\nBTD System Status Message - Maintenance Mode: ");
      sendResponse = 3;
      break;
   }
   
   else if (a==0x27 && b==0x00 && c==0x20 && d==0x00 && e==0x03){
      //fprintf(USB, "\n\nBTD No Flash Data Message: ");
      strcpy(btdCode, "NFD*");
      sendResponse = 3;
      break;
   }
   
   else if (a==0x10 && b==0x00 && c==0x20 && d==0x00 && e==0x0f){
      //fprintf(USB, "\n\nBTD Change in Relay Status: ");
      fprintf(USB, "\n");
      strcpy(btdCode, "CRS*");
      sendResponse = 3;
      break;
   }

   else if (a==0x57 && b==0x00 && c==0x20 && d==0x00 && e==0x04){
      //fprintf(USB, "\n\nBTD Flash Data Message: ");
      sendResponse = 3;
      break;
   }
   
   else if (a==0x12 && b==0x00 && c==0x20 && d==0x00 && e==0x05){
      //fprintf(USB, "\n\nBTD Change in Warning Status: ");
      fprintf(USB, "\n");
      strcpy(btdCode, "CWS*");
      sendResponse = 3;
      break;
   }
   
   else if (a==0x3f && b==0x00 && c==0x20 && d==0x00 && e==0x06){
      //fprintf(USB, "\nBTD Configuration Message: ");
      break;
   }
   
   else if (a==0x16 && b==0x00 && c==0x20 && d==0x00 && e==0x07){
      //fprintf(USB, "\nBTD Acknowledge Data: ");
      break;
   }

   else if (a==0x16 && b==0x00 && c==0x20 && d==0x00 && e==0x09){
      //fprintf(USB, "\nBTD Date and Time: ");
      break;
   }

   else{
      //fprintf(USB,"\nBTD Invalid Message: ");
   sendResponse = 0;
      break;
   }
   clear_InterruptGSM();
   strcpy(strBTD_info, btdCode);
   sprintf(message, "%s%i\r", strBTD_info, f); 
   fprintf(USB, "SMS to Sent: %s", message);
   strcpy(strBTD_info, "");
   strcpy(btdCode, "");
   sendToLTE(message);
   
   
   
   delay_ms(200);
   return sendResponse;
}

void dMonth(m){
   //char month;
   switch(m){    
      case 1: //fprintf(USB, "January");
         break;
      case 2: //fprintf(USB, "February");
         break;
      case 3: //fprintf(USB, "March");
         break;
      case 4: //fprintf(USB, "April");
         break;
      case 5: //fprintf(USB, "May");
         break;
      case 6: //fprintf(USB, "June");
         break;
      case 7: //fprintf(USB, "July");
         break;
      case 8: //fprintf(USB, "August");
         break;
      case 9: //fprintf(USB, "September");
         break;
      case 10: //fprintf(USB, "October");
         break;
      case 11: //fprintf(USB, "November");
         break;
      case 12: //fprintf(USB, "December");
         break;
      default : 
         break;
   }
}

void writeData(w, t){
   int16 crc=0;
   uint8_t  bytes[2];
   int i = 0;
   char msmD [18] = {0xff, 0xff, 0x12, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xad, 0x6b};
   char ack [22] = {0xff, 0xff, 0x16, 0x00, 0x02, 0x01, 0x00, 0x06, 0x00, 0x04, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x5a};
         
   
   switch(w){
   case 1:
      //fprintf(USB, "\narQ Accept Connect Request = %X %X %X %X %X %X %X %X %X %X", 0xff, 0xff, 0x0a, 0x00, 0x02, 0x33, 0x00, 0x00, 0x9f, 0xf7);
      fprintf(USB, "\nARQ Accepts Request\n"); 
      fprintf(RS232_BTD200, "%c%c%c%c%c%c%c%c%c%c", 0xff, 0xff, 0x0a, 0x00, 0x02, 0x33, 0x00, 0x00, 0x9f, 0xf7);
      //BTDhealth[0] = 100;
      fprintf(USB, "Message Number = %i\n", t);
      break;
      //%d%d%d%d%d%d%d%d%d%d
   case 2:
      for (i=0;i<18;i++){
         msmD[7] = t;
      }
      crc=crc_generator(msmD, 16);
      bytes[0] = *((uint8_t*)&(crc)+1);
      bytes[1] = *((uint8_t*)&(crc)+0);
      //fprintf(USB, "\nARQ Module Status Message: ");
      
      for (i=0;i<18;i++){ 
         msmD[16] = bytes[1];
         msmD[17] = bytes[0];
      }
      
      //for (i=0;i<18;i++){
         //fprintf(USB, "%X ", msmD[i]);
      //}
      fprintf(RS232_BTD200, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 0xff, 0xff, 0x12, 0x00, 0x02, 0x02, 0x00,  msmD[7], 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, msmD[16], msmD[17]);
      fprintf(USB, "\nMessage Number = %i\n", t);
      break;
   
   case 3:
      for (i=0;i<22;i++){
         ack[7] = t;
      }  
      crc=crc_generator(ack, 20);
      bytes[0] = *((uint8_t*)&(crc)+1);
      bytes[1] = *((uint8_t*)&(crc)+0);
      //fprintf(USB, "\nARQ Acknowledge Data: "); 
      
      for (i=0;i<22;i++){
         ack[20] = bytes[1];
         ack[21] = bytes[0];
      }
     
      //for (i=0;i<22;i++){
         //fprintf(USB, "%X ", ack[i]);
      //}
      
      fprintf(RS232_BTD200, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c", 0xff, 0xff, 0x16, 0x00, 0x02, 0x01, 0x00, ack[7], 0x00, 0x04, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ack[20], ack[21]);
      fprintf(USB, "\nMessage Number = %i\n", t);
      break;
   
   default:
      //fprintf(USB,"\nARQ No Valid Response.");
      break;  
   }
}

void polarConverter(){
   float x, y;
   const float piVal = 3.141592; 
   char LatLong[30]={};
   char septr[3], *ptr;
   
   int16 num;
   int  rt[10]={}; 
   int i;
   float r;
   //int16 dirVal;
   long int dirVal;
   //unsigned int t;
   
   // fprintf(USB,"\nTest Data: %s", distDir);  
   strcpy(septr,".+");
   ptr = strtok(distDir, septr);
   while(ptr!=0){
      for (i=0;i<4;i++){   
         //unsigned long num = (unsigned long)strtol(ptr, NULL, 10);
         num = (int16)strtol(ptr, NULL, 10);
         //fprintf(USB, "%s ----- ", ptr);
         rt[i] = num;  
         //fprintf(USB, "\nVal: %lu", num);  
         if (i==2){
         dirVal = num;}
         ptr = strtok(0, septr);  
      }
   } 
   //r = rt[0] + (0.01*rt[1]) + 0.05;
   r = rt[0] + (0.01*rt[1]);
   //ASTI Latlong
   float latA = 14.647; //14.646990
   float lonA = 121.072; //121.072072
   //fprintf(USB,"\nDirection Value: %li", dirVal); 
   
   x = (r*cos(dirVal*(piVal / 180.0)))/111.111;
   y = (r*sin(dirVal*(piVal / 180.0)))/107.721;  

   if (r > 0){
      //sprintf(LatLong, "LT%i:%0.6f+LN%i:%0.6f+", rt[3], x+latA, rt[3], y+lonA);
      sprintf(LatLong, "LT%i:%0.3f+LN%i:%0.3f+", rt[3], x+latA, rt[3], y+lonA);
      //strcat(strLaLo, LatLong);
      strcat(BTDLaLo, LatLong);
      //strcpy(LatLong, "");
   }
   
   else{
   sprintf(LatLong, "LT%i:%s+LN%i:%s+", rt[3], "00.000", rt[3],  "000.000");
   //sprintf(LatLong, "LT%i:%s+LN%i:%s+", rt[3], "00.000000", rt[3],  "000.000000");
   //strcat(strLaLo, LatLong);
   strcat(BTDLaLo, LatLong);
   //strcat(BTDLaLo, LatLong);
   //strcpy(LatLong, "");
   }
   //fprintf(USB, "\nConverted Polar: %s", LatLong);
   //fprintf(USB, "\nAcquired: %s", BTDLaLo);
   strcpy(LatLong, "");
   //return 0;  
}  

//Reading BTD-200
void readSerial(){
  // fprintf(USB, "\nInitializing BTD200 ");
   char cx[100] = {}; //0xed, 0x08, 0x2d,
   int i;
   //int j;
   long timeOut=0;
   int byteCount;
   int response;

   //Flash Data variables
   //int dIndex;
   float distance;
   int16 dir;
   int m;
   int p;
  
   int inF = 1;
   int index;
   
   //char fc[100] = {};
   char dsdr[50] = {};
   char dt[20]  = {};
   char fcount[2] = {};   
   
   int16 dist[2];
   int16 dirc[2];
   
   while(kbhit(RS232_BTD200)&&++timeOut<50000){
     // fprintf(USB,"\nNo Data!\n");
      delay_us(10);
   }
     
   if (!kbhit(RS232_BTD200)){
      //fprintf(USB, "\nTest kbhit");
      //fprintf(USB, RS232_BTD200);
      //setup_wdt(WDT_OFF);
       
      //Catching header to byte count
      for (i=0;i<3;i++){
      //fprintf(USB, RS232_BTD200);
      cx[i] = fgetc(RS232_BTD200);        
      }
      byteCount = cx[2];
      
      //Catching index 3 to byte count or last byte of message
      for (i=3;i<byteCount;i++){
         cx[i] = fgetc(RS232_BTD200);  
         //fprintf(USB, RS232_BTD200);
      }
      
      //Printing the complete hex message from BTD-200
      for (i=0;i<byteCount;i++){
         fprintf(USB, "%X ", cx[i]);   
         //fprintf(USB, "\nPrinting");
         //fprintf(RS485_GDAT1, "%c", cx[i]);
      }

      if (cx[0] == 0xff){
         //fprintf(USB, RS232_BTD200);
         if (cx[1] == 0xff){ 
            //fprintf(USB, RS232_BTD200);
            //fprintf(USB, "\nTest 2nd header");
            
            //Reading and analyzing the BTD-200 command and selecting the correct response
            response = readData(cx[2], cx[3], cx[4], cx[5], cx[6], cx[7]);
            //fprintf(USB, "\nTest writeData"); 
            writeData(response, cx[7]);
            fprintf(USB, "\n");
            
            getMcuDateTime();
            strcpy(biralBT, strDateTime);
            fprintf(USB, "Date-Time: %s\n", biralBT);
         
            strcpy(strDateTime, ""); 
            strcpy(biralBT, ""); 
         }
      }     
   } 
              
          
   delay_ms(50);
   //fprintf(USB,"\nOngoing Read Serial!\n");
 
  
   //fprintf(USB, "\nWhere's data");
   if (cx[2]==0x0a && cx[2]==0x10 && cx[3]==0x00 && cx[4]==0x20 && cx[5]==0x00 && cx[6]==0x01){
      btdStatus(2);    
   }
   
    else if (cx[7]==0 && cx[2]==0x0a && cx[3]==0x00 && cx[4]==0x20 && cx[5]==0x00 && cx[6]==0x21){
      btdStatus(3);
    }
   else if (cx[7]>1 && cx[7]<5) {
      btdStatus(3);
   }
   
   else if (cx[7]==63){
      btdStatus(4);
   }
                
                
   else if (cx[2]==0x57 && cx[3]==0x00 && cx[4]==0x20 && cx[5]==0x00 && cx[6]==0x04 ){
       getMcuDateTime();
       strcpy(biralBT, strDateTime);
      //fprintf(USB, "\nTest");
    
      fprintf(USB, "Warning - Flash Count: %X  ", cx[18]);  
      //sprintf(fc, "FC:%i+", cx[18]); // integer to string    
      for (index=0;index<48;index=index+12){
      //fprintf(USB, "\nIndex: %i", inF);
         for (i=0;i<2;i++){
            dist[0] = cx[40+index];
            dist[1] = cx[41+index];
         }

         distance = (dist[1]<<8 | dist[0])*0.01;     

         if (cx[43+index] == 0){
            dir =   cx[43+index]<<8 | cx[42+index];
         }
               
         if (cx[43+index] > 0){
            for (i=0;i<2;i++){
               dirc[0] = cx[42+index];
               dirc[1] = cx[43+index];
            }
            dir = dirc[1]<<8 | dirc[0];
            //fprintf(USB, "\nDirection Hex: %X %X degrees  ", cx[42], cx[43]);
         }
         
         m = cx[36];
         p = cx[18];
               
         //delay_ms(50);
         //fprintf(USB, "\nDistance: %lf km  Direction: %li degrees  ", distance, dir);
         //fprintf(USB, "Date: ");
         //dMonth(m);
         //fprintf(USB, " %i, 20%i", cx[35+index], cx[37+index]);
         //fprintf(USB, "  Time: %02i:%02i:%02i", cx[34+index], cx[33+index], cx[32+index]);                           
         
         sprintf(dsdr, "%lf+%li+%i", distance, dir, inF);
         sprintf(fcount, "%i", p);
          
         //fprintf(USB, "\nDistance: %s  ", dsdr);
         //fprintf(USB, "\nTest: %s", dsdr);
               
         strcpy(distDir, dsdr);
         strcpy(flashCount, fcount);
         
         polarConverter();
         
         //delay_ms(100);
         
         inF = inF + 1; 
              
         //strcat(strBTD, dsdr);
         //fprintf(USB, "\nBiral Data: %s\n", BTDLaLo);
         strcpy(dsdr, NULL);
         strcpy(fcount, NULL);
         
         }
         
         delay_ms(50);
         //Storing Date and Time   190905/175000  YYMMDD/HHMMSS
         sprintf(dt, "%02i%02i%02i/%02i%02i%02i", cx[37], cx[36], cx[35], cx[34], cx[33], cx[32]);
         //fprintf(USB, "\nBiral Time: %s\n", dt);
            
         //delay_ms(100);
         
         //Carbs ---- Change BTD time to arQ Time
         //strcpy(biralBT, dt);
         
         
         
         //fprintf(USB, "\nBiral Data: %s\n", BTDLaLo);
         //BTDhealth[0] = 6;
         btdStatus(1);
         delay_ms(50);
      
      }
         
//!      else if (cx[2]==0x27 && cx[3]==0x00 && cx[4]==0x20 && cx[5]==0x00 && cx[6]==0x03){
//!         btdStatus(5);
//!         delay_ms(50);
//!      }
         
      //fprintf(USB, "\nTest end of Serial Read"); 
      //setup_wdt(WDT_ON);
      //cx[7] = 0x0a;
      //sprintf(strBTD_info, "NFD*%X\r", cx[7]);
      //strcpy(strBTD_con, strBTD_info);
      //btdStatus(5);
      //strcpy(strBTD_info, "");
      delay_ms(50);
}






