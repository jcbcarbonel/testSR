char DAVISTEMP[10]={};

void tempData()
{
   int ii=0;
   char *ptrData=NULL;
   unsigned int TempHexData[7]={};
   unsigned int16 CRC=0;
   unsigned int16 check2Digits=0;

   while(1)
   {
      for (ii=0;ii<=8;ii++)
         *(ptrData+ii) = fgetc(SNSR_DAVIES);
      CRC = generate_16bit_crc(ptrData, 6, CRC_CCITT);
      check2Digits = make16(*(ptrData+6),*(ptrData+7));
      ptrData = TempHexData;
      if (CRC == check2Digits)
         fprintf(PC,"%x %x %x %x %x %x %x %x\n",ptrData[0],ptrData[1],ptrData[2],ptrData[3],ptrData[4],ptrData[5],ptrData[6],ptrData[7]);
      
   }     
}

void strDavies()
{
   int1 bool40=0;
   int1 boolE0=0;
   int1 bool80=0;
   int1 boolA0=0;
   int1 bool60=0;
   int1 bool50=0;
   char FullString[80]={};
   int FirstChar=0;
   char arrUV[8]={};
   char arrSOLAR[8]={};
   char arrTEMP[8]={};
   char arrHUM[8]={};
   char arrWD[8]={};
   char arrWS[8]={};
   int1 exitLoop=0;
   int1 checkCRC=0;
   int16 timeOut=0;
   
   
   readFromRS485();
   while(!kbhit(SNSR_DAVIES)&&++timeOut<50000)
      delay_us(100); 
   
   if(!kbhit(SNSR_DAVIES))
   {
      strcpy(funcReturnVar,"NO REPLY FROM DAVIES SENSOR");
      return;
   }
      
   while (exitLoop==0)
   {
      bool40=0;
      bool80=0;
      boolA0=0;
      bool60=0;
      bool50=0;
      boolE0=0;
      
      strcpy(FullString,"");
      
      #ifdef DAVIS_NO_SOLAR_UV
         bool40=1;
         bool60=1;
         strcpy(arrSOLAR,"0");
         strcpy(arrUV,"0");
      #endif
      
      while (bool40!=1 || bool80!=1 || boolA0!=1 || bool60!=1 || bool50!=1)
      {
         FirstChar = fgetc(SNSR_DAVIES);
         switch (FirstChar)
         {
            case 0x40: //uv
               if (bool40==0)
               {
                  checkCRC = getHexData(1);
                  if (checkCRC==1)
                  {
                     convertData(6);
                     strcpy(arrUV,DAVISTEMP);
                     fprintf(PC,"uv=%s\n",arrUV);
                     bool40=1;
                  }
               }
               break;
            case 0x60: //solar
               if (bool60==0)
               {
                  checkCRC = getHexData(2);
                  if (checkCRC==1)
                  {
                     bool60=1;
                     convertData(7);
                     strcpy(arrSOLAR,DAVISTEMP);
                     fprintf(PC,"solar=%s\n",arrSOLAR);
                  }
               }
               break;
            case 0x80: //temp
               if (bool80==0)
               {
                  restart_wdt();
                  checkCRC = getHexData(3);
                  if (checkCRC==1)
                  {
                     bool80=1;
                     convertData(9);
                     strcpy(arrTEMP,DAVISTEMP);
                     fprintf(PC,"temp=%s\n",arrTEMP);
                  }
               }
               break;
            case 0xA0: //humidity
               if (boolA0==0)
               {
                  checkCRC = getHexData(4);
                  if (checkCRC==1)
                  {
                     boolA0=1;
                     convertData(8);
                     strcpy(arrHUM,DAVISTEMP);
                     fprintf(PC,"hum=%s\n",arrHUM);
                  }
               }
               break;
            case 0x50: //wind
               if (bool50==0)
               {
                  checkCRC = getHexData(5);
                  if (checkCRC==1)
                  {
                     bool50=1;
                     convertData(5);
                     strcpy(arrWD,funcReturnVar);
                     convertData(4);
                     strcpy(arrWS,funcReturnVar);
                     fprintf(PC,"wind=%s+%s\n",arrWD,arrWS);
                  }
               }
               break;
         }
      }
      
      strcpy(FullString,arrTEMP);
      strcat(FullString,"+");
      strcat(FullString,arrHUM);
      strcat(FullString,"+");
      strcat(FullString,arrUV);
      strcat(FullString,"+");
      strcat(FullString,arrSOLAR);
      strcat(FullString,"+");
      strcat(FullString,arrWS);
      strcat(FullString,"+");
      strcat(FullString,arrWD);
      strcpy(funcReturnVar,FullString);
      exitLoop=1;
   }
}


/*
int1 getHexData(int hbp)
{
   int ii=0;
   unsigned int data_=0;
   unsigned int16 CRC=0;
   unsigned int16 check2Digits=0;
  
   for (ii=1;ii<=7;ii++)
   {
      data_ = fgetc(SNSR_DAVIES);
      switch(hbp)
      {
         case 0: //rain
            //ptrData = PUB_RAIN;
            //*(ptrData) = 0xE0;
            break;
         case 1: //uv
            PUB_UV[ii] = data_;
            break;
         case 2: //solar
            PUB_SOLAR[ii] = data_;
            break;
         case 3: //temp
            PUB_TEMP[ii] = data_;
            break;
         case 4: //hum
            PUB_HUM[ii] = data_;
            break;
         case 5: //wind
            PUB_WIND[ii] = data_;
            break;
      }
   }      
   fprintf(PC,"batteryUSED__END=%i\n",BATTERYUSED);
  
   CRC = generate_16bit_crc(ptrData, 6, CRC_CCITT);
   check2Digits = make16(*(ptrData+6),*(ptrData+7));
   
   if (CRC == check2Digits)
      return 1;
   else 
      return 0;
}
*/


int1 getHexData(int hbp)
{
  int ii=0;
  char *ptrData=NULL;
  unsigned int TempHexData=0;
  unsigned int16 CRC=0;
  unsigned int16 check2Digits=0;
  
  
  switch(hbp)
  {
   case 0: //rain
      //ptrData = PUB_RAIN;
      //*(ptrData) = 0xE0;
      break;
   case 1: //uv
      ptrData = PUB_UV;
      *(ptrData) = 0x40;
      break;
   case 2: //solar
      ptrData = PUB_SOLAR;
      *(ptrData) = 0x60;
      break;
   case 3: //temp
      ptrData = PUB_TEMP;
      *(ptrData) = 0x80;
      break;
   case 4: //hum
      ptrData = PUB_HUM;
      *(ptrData) = 0xA0;
      break;
   case 5: //wind
      ptrData = PUB_WIND;
      *(ptrData) = 0x50;
      break;
  }
  
   for (ii=1;ii<=7;ii++)
      *(ptrData+ii) = fgetc(SNSR_DAVIES);
  
  CRC = generate_16bit_crc(ptrData, 6, CRC_CCITT);
  check2Digits = make16(*(ptrData+6),*(ptrData+7));
  ptrData = TempHexData;
  if (CRC == check2Digits)
      return 1;
  else 
      return 0;
}


void convertData(int hbp)
{
   char strx[7]={};
   char ptr[7]={};
   char ptx[7]={};
   char strxx[7]={};
   char *ptrCh=NULL; 
   char *ptr1=NULL;
   unsigned int16 iNum=0;
   float fNum=0;
   int offset=0;
   
   
   strcpy(strx,NULL);
   strcpy(strxx,NULL);
   switch(hbp)
   {
      case 9: //temp
         ptrCh = strx;
         ptr1 = strxx;
         itoa(PUB_TEMP[3],16,ptr);
         strcpy(strxx,ptr);
         itoa(PUB_TEMP[4],16,ptx);
         if (strlen(ptx)==1)
         {
            *(ptr1+2) = ptx[0];
            *(ptr1+3) = '\0';
         }
         else
         {
            *(ptr1+2) = ptx[1];
            *(ptr1+3) = '\0';
         }
         *ptrCh = '0';   
         *(ptrCh+1) = 'x';
         *(ptrCh+2) = strxx[0];
         *(ptrCh+3) = strxx[1];
         *(ptrCh+4) = strxx[2];
         *(ptrCh+5) = '\0';
         
         iNum = atol(strx);
         fNum = ((iNum * .1)-32.0)*5/9;
         //iNum=Round45(fNum);
         iNum=fNum;
         itoa(iNum,10,strx);
         break;
     case 8: //hum
         ptrCh = strx;
         ptr1 = strxx;
         itoa(PUB_HUM[3],16,ptr);
         strcpy(strxx,ptr);
         itoa(PUB_HUM[4],16,ptx);
         
         if (strlen(ptr)==1)
         {
            *(ptr1) = '0';
            *(ptr1+1) = ptr[0];
         }
         else
         {
            *(ptr1) =  ptr[0];
            *(ptr1+1) = ptr[1];
         }
            
         if (strlen(ptx)==1)
         {
            *(ptr1+2) = '0';
            *(ptr1+3) = '\0';
         }
         else
         {
            *(ptr1+2) = ptx[0];
            *(ptr1+3) = '\0';
         }
         *ptrCh = '0';
         *(ptrCh+1) = 'x';
         *(ptrCh+2) = strxx[2];
         *(ptrCh+3) = strxx[0];
         *(ptrCh+4) = strxx[1];
         *(ptrCh+5) = '\0';
         iNum = atol(strx);
         fNum = (iNum * .1);
         //iNum=Round45(fNum);
         iNum=fNum;
         itoa(iNum,10,strx);
         break;
     case 7: //solar
         offset = findOffset(PUB_SOLAR[4]);
         fNum = getUV_SOLAR(PUB_SOLAR[3], offset, 0);
         sprintf(strx,"%2.2f",fNum);
         break;
     case 6: //uv
         offset = findOffset(PUB_UV[4]);
         fNum = getUV_SOLAR(PUB_UV[3], offset, 1);
         sprintf(strx,"%2.2f",fNum);
         break;
     case 5: //wind direction
         ptrCh = NULL;
         iNum = PUB_WIND[2];
         //winddx = PUB_WIND[2];
         itoa(iNum,10,strx);
         break;
     case 4: //wind speed
         if (PUB_WIND[1]==0)
         {
            ptrCh = strx;
            *ptrCh = '0';
            *(ptrCh+1) = '\0';
         }
         else
            itoa(PUB_WIND[1],16,strx);
         //windsx = PUB_WIND[0];
         break;
   }
   strcpy(DAVISTEMP,strx);
}


int findOffset(int modez)
{
   switch(modez)
   {
      case 0x05:
         return 0;
         break;
      case 0x45:
         return 1;
         break;
      case 0x85:
         return 2;
         break;
      case 0xc5:
         return 3;         
         break;
   }
}

float getUV_SOLAR(int valx, int offset, int1 UV)
{
   unsigned int16 tempInt = 0;
   float flEquiv = 0;
   
   tempInt = ((int16)(valx)) * 4;
   tempInt = tempInt + offset;
   if (UV == 1)
      flEquiv = ((float)(tempInt)) * 20.02;
   else
      flEquiv = ((float)(tempInt)) * 1800;
   flEquiv = flEquiv / 1024;
   return flEquiv;
}

