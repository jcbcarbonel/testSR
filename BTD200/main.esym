D G "__PCH__" 0 240 ""5.091""
D G "__DEVICE__" 0 240 "8722"
D G "__DATE__" 0 240 ""15-Aug-25""
D G "__TIME__" 0 240 ""09:24:51""
D G "_UNICODE" 0 240 ""?""
D G "__EVAL" 0 240 ""?"" "Author: Glenn Vincent Lopez"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 48 ""
v L "value" 1 48 "int8" `55 
f B "set_tris_a" 1 48 "void(int8 value)" `54 
f N "set_tris_b" 1 49 ""
v L "value" 1 49 "int8" `57 
f B "set_tris_b" 1 49 "void(int8 value)" `56 
f N "set_tris_c" 1 50 ""
v L "value" 1 50 "int8" `59 
f B "set_tris_c" 1 50 "void(int8 value)" `58 
f N "set_tris_d" 1 51 ""
v L "value" 1 51 "int8" `61 
f B "set_tris_d" 1 51 "void(int8 value)" `60 
f N "set_tris_e" 1 52 ""
v L "value" 1 52 "int8" `63 
f B "set_tris_e" 1 52 "void(int8 value)" `62 
f N "set_tris_f" 1 53 ""
v L "value" 1 53 "int8" `65 
f B "set_tris_f" 1 53 "void(int8 value)" `64 
f N "set_tris_g" 1 54 ""
v L "value" 1 54 "int8" `67 
f B "set_tris_g" 1 54 "void(int8 value)" `66 
f N "set_tris_h" 1 55 ""
v L "value" 1 55 "int8" `69 
f B "set_tris_h" 1 55 "void(int8 value)" `68 
f N "set_tris_j" 1 56 ""
v L "value" 1 56 "int8" `71 
f B "set_tris_j" 1 56 "void(int8 value)" `70 
f N "get_tris_a" 1 57 ""
f B "get_tris_a" 1 57 "int8()" `72 
f N "get_tris_b" 1 58 ""
f B "get_tris_b" 1 58 "int8()" `73 
f N "get_tris_c" 1 59 ""
f B "get_tris_c" 1 59 "int8()" `74 
f N "get_tris_d" 1 60 ""
f B "get_tris_d" 1 60 "int8()" `75 
f N "get_tris_e" 1 61 ""
f B "get_tris_e" 1 61 "int8()" `76 
f N "get_tris_f" 1 62 ""
f B "get_tris_f" 1 62 "int8()" `77 
f N "get_tris_g" 1 63 ""
f B "get_tris_g" 1 63 "int8()" `78 
f N "get_tris_h" 1 64 ""
f B "get_tris_h" 1 64 "int8()" `79 
f N "get_tris_j" 1 65 ""
f B "get_tris_j" 1 65 "int8()" `80 
f N "output_a" 1 66 ""
v L "value" 1 66 "int8" `82 
f B "output_a" 1 66 "void(int8 value)" `81 
f N "output_b" 1 67 ""
v L "value" 1 67 "int8" `84 
f B "output_b" 1 67 "void(int8 value)" `83 
f N "output_c" 1 68 ""
v L "value" 1 68 "int8" `86 
f B "output_c" 1 68 "void(int8 value)" `85 
f N "output_d" 1 69 ""
v L "value" 1 69 "int8" `88 
f B "output_d" 1 69 "void(int8 value)" `87 
f N "output_e" 1 70 ""
v L "value" 1 70 "int8" `90 
f B "output_e" 1 70 "void(int8 value)" `89 
f N "output_f" 1 71 ""
v L "value" 1 71 "int8" `92 
f B "output_f" 1 71 "void(int8 value)" `91 
f N "output_g" 1 72 ""
v L "value" 1 72 "int8" `94 
f B "output_g" 1 72 "void(int8 value)" `93 
f N "output_h" 1 73 ""
v L "value" 1 73 "int8" `96 
f B "output_h" 1 73 "void(int8 value)" `95 
f N "output_j" 1 74 ""
v L "value" 1 74 "int8" `98 
f B "output_j" 1 74 "void(int8 value)" `97 
f N "input_a" 1 75 ""
f B "input_a" 1 75 "int8()" `99 
f N "input_b" 1 76 ""
f B "input_b" 1 76 "int8()" `100 
f N "input_c" 1 77 ""
f B "input_c" 1 77 "int8()" `101 
f N "input_d" 1 78 ""
f B "input_d" 1 78 "int8()" `102 
f N "input_e" 1 79 ""
f B "input_e" 1 79 "int8()" `103 
f N "input_f" 1 80 ""
f B "input_f" 1 80 "int8()" `104 
f N "input_g" 1 81 ""
f B "input_g" 1 81 "int8()" `105 
f N "input_h" 1 82 ""
f B "input_h" 1 82 "int8()" `106 
f N "input_j" 1 83 ""
f B "input_j" 1 83 "int8()" `107 
f N "input_change_a" 1 84 ""
f B "input_change_a" 1 84 "int8()" `108 
f N "input_change_b" 1 85 ""
f B "input_change_b" 1 85 "int8()" `109 
f N "input_change_c" 1 86 ""
f B "input_change_c" 1 86 "int8()" `110 
f N "input_change_d" 1 87 ""
f B "input_change_d" 1 87 "int8()" `111 
f N "input_change_e" 1 88 ""
f B "input_change_e" 1 88 "int8()" `112 
f N "input_change_f" 1 89 ""
f B "input_change_f" 1 89 "int8()" `113 
f N "input_change_g" 1 90 ""
f B "input_change_g" 1 90 "int8()" `114 
f N "input_change_h" 1 91 ""
f B "input_change_h" 1 91 "int8()" `115 
f N "input_change_j" 1 92 ""
f B "input_change_j" 1 92 "int8()" `116 
f N "port_b_pullups" 1 93 ""
v L "value" 1 93 "int8" `118 
f B "port_b_pullups" 1 93 "void(int8 value)" `117 
f N "port_d_pullups" 1 94 ""
v L "value" 1 94 "int8" `120 
f B "port_d_pullups" 1 94 "void(int8 value)" `119 
f N "port_e_pullups" 1 95 ""
v L "value" 1 95 "int8" `122 
f B "port_e_pullups" 1 95 "void(int8 value)" `121 
f N "port_j_pullups" 1 96 ""
v L "value" 1 96 "int8" `124 
f B "port_j_pullups" 1 96 "void(int8 value)" `123 
f N "input" 1 97 ""
v L "pin" 1 97 "int16" `126 
f B "input" 1 97 "int8(int16 pin)" `125 
f N "input_state" 1 98 ""
v L "pin" 1 98 "int16" `128 
f B "input_state" 1 98 "int8(int16 pin)" `127 
f N "output_low" 1 99 ""
v L "pin" 1 99 "int16" `130 
f B "output_low" 1 99 "void(int16 pin)" `129 
f N "output_high" 1 100 ""
v L "pin" 1 100 "int16" `132 
f B "output_high" 1 100 "void(int16 pin)" `131 
f N "output_toggle" 1 101 ""
v L "pin" 1 101 "int16" `134 
f B "output_toggle" 1 101 "void(int16 pin)" `133 
f N "output_bit" 1 102 ""
v L "pin" 1 102 "int16" `136 
v L "level" 1 102 "int8" `137 
f B "output_bit" 1 102 "void(int16 pin,int8 level)" `135 
f N "output_float" 1 103 ""
v L "pin" 1 103 "int16" `139 
f B "output_float" 1 103 "void(int16 pin)" `138 
f N "output_drive" 1 104 ""
v L "pin" 1 104 "int16" `141 
f B "output_drive" 1 104 "void(int16 pin)" `140  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 108 "31744"
d G "PIN_A1" 1 109 "31745"
d G "PIN_A2" 1 110 "31746"
d G "PIN_A3" 1 111 "31747"
d G "PIN_A4" 1 112 "31748"
d G "PIN_A5" 1 113 "31749"
d G "PIN_A6" 1 114 "31750"
d G "PIN_A7" 1 115 "31751"
d G "PIN_B0" 1 117 "31752"
d G "PIN_B1" 1 118 "31753"
d G "PIN_B2" 1 119 "31754"
d G "PIN_B3" 1 120 "31755"
d G "PIN_B4" 1 121 "31756"
d G "PIN_B5" 1 122 "31757"
d G "PIN_B6" 1 123 "31758"
d G "PIN_B7" 1 124 "31759"
d G "PIN_C0" 1 126 "31760"
d G "PIN_C1" 1 127 "31761"
d G "PIN_C2" 1 128 "31762"
d G "PIN_C3" 1 129 "31763"
d G "PIN_C4" 1 130 "31764"
d G "PIN_C5" 1 131 "31765"
d G "PIN_C6" 1 132 "31766"
d G "PIN_C7" 1 133 "31767"
d G "PIN_D0" 1 135 "31768"
d G "PIN_D1" 1 136 "31769"
d G "PIN_D2" 1 137 "31770"
d G "PIN_D3" 1 138 "31771"
d G "PIN_D4" 1 139 "31772"
d G "PIN_D5" 1 140 "31773"
d G "PIN_D6" 1 141 "31774"
d G "PIN_D7" 1 142 "31775"
d G "PIN_E0" 1 144 "31776"
d G "PIN_E1" 1 145 "31777"
d G "PIN_E2" 1 146 "31778"
d G "PIN_E3" 1 147 "31779"
d G "PIN_E4" 1 148 "31780"
d G "PIN_E5" 1 149 "31781"
d G "PIN_E6" 1 150 "31782"
d G "PIN_E7" 1 151 "31783"
d G "PIN_F1" 1 153 "31785"
d G "PIN_F2" 1 154 "31786"
d G "PIN_F3" 1 155 "31787"
d G "PIN_F4" 1 156 "31788"
d G "PIN_F5" 1 157 "31789"
d G "PIN_F6" 1 158 "31790"
d G "PIN_F7" 1 159 "31791"
d G "PIN_G0" 1 161 "31792"
d G "PIN_G1" 1 162 "31793"
d G "PIN_G2" 1 163 "31794"
d G "PIN_G3" 1 164 "31795"
d G "PIN_G4" 1 165 "31796"
d G "PIN_G5" 1 166 "31797"
d G "PIN_H0" 1 168 "31800"
d G "PIN_H1" 1 169 "31801"
d G "PIN_H2" 1 170 "31802"
d G "PIN_H3" 1 171 "31803"
d G "PIN_H4" 1 172 "31804"
d G "PIN_H5" 1 173 "31805"
d G "PIN_H6" 1 174 "31806"
d G "PIN_H7" 1 175 "31807"
d G "PIN_J0" 1 177 "31808"
d G "PIN_J1" 1 178 "31809"
d G "PIN_J2" 1 179 "31810"
d G "PIN_J3" 1 180 "31811"
d G "PIN_J4" 1 181 "31812"
d G "PIN_J5" 1 182 "31813"
d G "PIN_J6" 1 183 "31814"
d G "PIN_J7" 1 184 "31815"
d G "FALSE" 1 187 "0"
d G "TRUE" 1 188 "1"
d G "BYTE" 1 190 "int8"
d G "BOOLEAN" 1 191 "int1"
d G "getc" 1 193 "getch"
d G "fgetc" 1 194 "getch"
d G "getchar" 1 195 "getch"
d G "putc" 1 196 "putchar"
d G "fputc" 1 197 "putchar"
d G "fgets" 1 198 "gets"
d G "fputs" 1 199 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 204 ""
f B "restart_cause" 1 204 "int8()" `142 
f N "reset_cpu" 1 205 ""
f B "reset_cpu" 1 205 "void()" `143 
f N "sleep" 1 206 ""
f B "sleep" 1 206 "void()" `144 
f N "sleep" 1 207 ""
v L "type" 1 207 "int8" `146 
f B "sleep" 1 207 "void(int8 type)" `145  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 209 "7"
d G "MCLR_FROM_SLEEP" 1 210 "11"
d G "MCLR_FROM_RUN" 1 211 "15"
d G "NORMAL_POWER_UP" 1 212 "12"
d G "BROWNOUT_RESTART" 1 213 "14"
d G "WDT_FROM_SLEEP" 1 214 "3"
d G "RESET_INSTRUCTION" 1 215 "0"
d G "REG_LOW_POWER" 1 218 "2"
d G "REG_NORMAL" 1 219 "0" "default"
d G "SLEEP_FULL" 1 222 "0" "Default"
d G "SLEEP_IDLE" 1 223 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 230 ""
v L "mode" 1 230 "int8" `148 
f B "setup_timer_0" 1 230 "void(int8 mode)" `147 
f N "set_timer0" 1 231 ""
v L "value" 1 231 "int16" `150 
f B "set_timer0" 1 231 "void(int16 value)" `149 
f N "get_timer0" 1 232 ""
f B "get_timer0" 1 232 "int16()" `151 
f N "setup_counters" 1 233 ""
v L "mode" 1 233 "int8" `153 
v L "prescaler" 1 233 "int8" `154 
f B "setup_counters" 1 233 "void(int8 mode,int8 prescaler)" `152 
f N "set_rtcc" 1 234 ""
v L "value" 1 234 "int16" `156 
f B "set_rtcc" 1 234 "void(int16 value)" `155 
f N "get_rtcc" 1 235 ""
f B "get_rtcc" 1 235 "int16()" `157  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 237 "0"
d G "T0_EXT_L_TO_H" 1 238 "32"
d G "T0_EXT_H_TO_L" 1 239 "48"
d G "T0_DIV_1" 1 241 "8"
d G "T0_DIV_2" 1 242 "0"
d G "T0_DIV_4" 1 243 "1"
d G "T0_DIV_8" 1 244 "2"
d G "T0_DIV_16" 1 245 "3"
d G "T0_DIV_32" 1 246 "4"
d G "T0_DIV_64" 1 247 "5"
d G "T0_DIV_128" 1 248 "6"
d G "T0_DIV_256" 1 249 "7"
d G "T0_OFF" 1 251 "0x80"
d G "T0_8_BIT" 1 253 "0x40"
d G "RTCC_INTERNAL" 1 257 "0"
d G "RTCC_EXT_L_TO_H" 1 258 "32"
d G "RTCC_EXT_H_TO_L" 1 259 "48"
d G "RTCC_DIV_1" 1 260 "8"
d G "RTCC_DIV_2" 1 261 "0"
d G "RTCC_DIV_4" 1 262 "1"
d G "RTCC_DIV_8" 1 263 "2"
d G "RTCC_DIV_16" 1 264 "3"
d G "RTCC_DIV_32" 1 265 "4"
d G "RTCC_DIV_64" 1 266 "5"
d G "RTCC_DIV_128" 1 267 "6"
d G "RTCC_DIV_256" 1 268 "7"
d G "RTCC_OFF" 1 269 "0x80"
d G "RTCC_8_BIT" 1 270 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 281 ""
v L "mode" 1 281 "int16" `159 
f B "setup_wdt" 1 281 "void(int16 mode)" `158 
f N "restart_wdt" 1 282 ""
f B "restart_wdt" 1 282 "void()" `160  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 284 "0x100"
d G "WDT_OFF" 1 285 "0"
d G "WDT_4MS" 1 287 "0x300"
d G "WDT_8MS" 1 288 "0x500"
d G "WDT_16MS" 1 289 "0x700"
d G "WDT_32MS" 1 290 "0x900"
d G "WDT_64MS" 1 291 "0xB00"
d G "WDT_128MS" 1 292 "0xD00"
d G "WDT_256MS" 1 293 "0xF00"
d G "WDT_512MS" 1 294 "0x1100"
d G "WDT_1S" 1 295 "0x1300"
d G "WDT_2S" 1 296 "0x1500"
d G "WDT_4S" 1 297 "0x1700"
d G "WDT_8S" 1 298 "0x1900"
d G "WDT_16S" 1 299 "0x1B00"
d G "WDT_32S" 1 300 "0x1D00"
d G "WDT_64S" 1 301 "0x1F00"
d G "WDT_128S" 1 302 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 307 ""
v L "mode" 1 307 "int16" `162 
f B "setup_timer_1" 1 307 "void(int16 mode)" `161 
f N "get_timer1" 1 308 ""
f B "get_timer1" 1 308 "int16()" `163 
f N "set_timer1" 1 309 ""
v L "value" 1 309 "int16" `165 
f B "set_timer1" 1 309 "void(int16 value)" `164  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 312 "0"
d G "T1_INTERNAL" 1 313 "0x07"
d G "T1_EXTERNAL" 1 314 "0x87"
d G "T1_EXTERNAL_SYNC" 1 315 "0x83"
d G "T1_FOSC" 1 316 "0x47"
d G "T1_ENABLE_SOSC" 1 318 "0x08"
d G "T1_DIV_BY_1" 1 320 "0"
d G "T1_DIV_BY_2" 1 321 "0x10"
d G "T1_DIV_BY_4" 1 322 "0x20"
d G "T1_DIV_BY_8" 1 323 "0x30"
d G "T1_GATE" 1 325 "0x8000"
d G "T1_GATE_INVERTED" 1 326 "0xC000"
d G "T1_GATE_TOGGLE" 1 327 "0xA000"
d G "T1_GATE_SINGLE" 1 328 "0x9000"
d G "T1_GATE_TIMER2" 1 329 "0x8100"
d G "T1_GATE_COMP1" 1 330 "0x8200"
d G "T1_GATE_COMP2" 1 331 "0x8300"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 336 ""
v L "mode" 1 336 "int8" `167 
v L "period" 1 336 "int8" `168 
v L "postscale" 1 336 "int8" `169 
f B "setup_timer_2" 1 336 "void(int8 mode,int8 period,int8 postscale)" `166 
f N "get_timer2" 1 337 ""
f B "get_timer2" 1 337 "int8()" `170 
f N "set_timer2" 1 338 ""
v L "value" 1 338 "int8" `172 
f B "set_timer2" 1 338 "void(int8 value)" `171  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 340 "0"
d G "T2_DIV_BY_1" 1 341 "4"
d G "T2_DIV_BY_4" 1 342 "5"
d G "T2_DIV_BY_16" 1 343 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
f N "setup_timer_3" 1 348 ""
v L "mode" 1 348 "int16" `174 
f B "setup_timer_3" 1 348 "void(int16 mode)" `173 
f N "get_timer3" 1 349 ""
f B "get_timer3" 1 349 "int16()" `175 
f N "set_timer3" 1 350 ""
v L "value" 1 350 "int16" `177 
f B "set_timer3" 1 350 "void(int16 value)" `176  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 353 "0"
d G "T3_INTERNAL" 1 354 "0x07"
d G "T3_EXTERNAL" 1 355 "0x87"
d G "T3_EXTERNAL_SYNC" 1 356 "0x83"
d G "T3_FOSC" 1 357 "0x47"
d G "T3_ENABLE_SOSC" 1 359 "0x08"
d G "T3_DIV_BY_1" 1 361 "0"
d G "T3_DIV_BY_2" 1 362 "0x10"
d G "T3_DIV_BY_4" 1 363 "0x20"
d G "T3_DIV_BY_8" 1 364 "0x30"
d G "T3_GATE" 1 366 "0x8000"
d G "T3_GATE_INVERTED" 1 367 "0xC000"
d G "T3_GATE_TOGGLE" 1 368 "0xA000"
d G "T3_GATE_SINGLE" 1 369 "0x9000"
d G "T3_GATE_TIMER4" 1 370 "0x8100"
d G "T3_GATE_COMP1" 1 371 "0x8200"
d G "T3_GATE_COMP2" 1 372 "0x8300"
c L "set_timer3" 1 1 3 "FUNCTION"
f N "setup_timer_4" 1 377 ""
v L "mode" 1 377 "int16" `179 
v L "period" 1 377 "int8" `180 
v L "postscaler" 1 377 "int8" `181 
f B "setup_timer_4" 1 377 "void(int16 mode,int8 period,int8 postscaler)" `178 
f N "get_timer4" 1 378 ""
f B "get_timer4" 1 378 "int8()" `182 
f N "set_timer4" 1 379 ""
v L "value" 1 379 "int8" `184 
f B "set_timer4" 1 379 "void(int8 value)" `183  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 381 "0"
d G "T4_DIV_BY_1" 1 382 "4"
d G "T4_DIV_BY_4" 1 383 "5"
d G "T4_DIV_BY_16" 1 384 "6"
c L "set_timer4" 1 1 3 "FUNCTION"
f N "setup_timer_5" 1 389 ""
v L "mode" 1 389 "int16" `186 
f B "setup_timer_5" 1 389 "void(int16 mode)" `185 
f N "get_timer5" 1 390 ""
f B "get_timer5" 1 390 "int16()" `187 
f N "set_timer5" 1 391 ""
v L "value" 1 391 "int16" `189 
f B "set_timer5" 1 391 "void(int16 value)" `188  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 1 394 "0"
d G "T5_INTERNAL" 1 395 "0x07"
d G "T5_EXTERNAL" 1 396 "0x87"
d G "T5_EXTERNAL_SYNC" 1 397 "0x83"
d G "T5_FOSC" 1 398 "0x47"
d G "T5_LFINTRC" 1 399 "0xC7"
d G "T5_ENABLE_SOSC" 1 401 "0x08"
d G "T5_DIV_BY_1" 1 403 "0"
d G "T5_DIV_BY_2" 1 404 "0x10"
d G "T5_DIV_BY_4" 1 405 "0x20"
d G "T5_DIV_BY_8" 1 406 "0x30"
d G "T5_GATE" 1 408 "0x8000"
d G "T5_GATE_INVERTED" 1 409 "0xC000"
d G "T5_GATE_TOGGLE" 1 410 "0xA000"
d G "T5_GATE_SINGLE" 1 411 "0x9000"
d G "T5_GATE_TIMER6" 1 412 "0x8100"
d G "T5_GATE_COMP1" 1 413 "0x8200"
d G "T5_GATE_COMP2" 1 414 "0x8300"
c L "set_timer5" 1 1 3 "FUNCTION"
f N "setup_timer_6" 1 419 ""
v L "mode" 1 419 "int16" `191 
v L "period" 1 419 "int8" `192 
v L "postscaler" 1 419 "int8" `193 
f B "setup_timer_6" 1 419 "void(int16 mode,int8 period,int8 postscaler)" `190 
f N "get_timer6" 1 420 ""
f B "get_timer6" 1 420 "int8()" `194 
f N "set_timer6" 1 421 ""
v L "value" 1 421 "int8" `196 
f B "set_timer6" 1 421 "void(int8 value)" `195  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 1 424 "0"
d G "T6_DIV_BY_1" 1 425 "4"
d G "T6_DIV_BY_4" 1 426 "5"
d G "T6_DIV_BY_16" 1 427 "6"
c L "set_timer6" 1 1 3 "FUNCTION"
f N "setup_timer_7" 1 432 ""
v L "mode" 1 432 "int16" `198 
f B "setup_timer_7" 1 432 "void(int16 mode)" `197 
f N "get_timer7" 1 433 ""
f B "get_timer7" 1 433 "int16()" `199 
f N "set_timer7" 1 434 ""
v L "value" 1 434 "int16" `201 
f B "set_timer7" 1 434 "void(int16 value)" `200  "Constants used for SETUP_TIMER_7() are:"
d G "T7_DISABLED" 1 437 "0"
d G "T7_INTERNAL" 1 438 "0x07"
d G "T7_EXTERNAL" 1 439 "0x87"
d G "T7_EXTERNAL_SYNC" 1 440 "0x83"
d G "T7_FOSC" 1 441 "0x47"
d G "T7_ENABLE_SOSC" 1 443 "0x08"
d G "T7_DIV_BY_1" 1 445 "0"
d G "T7_DIV_BY_2" 1 446 "0x10"
d G "T7_DIV_BY_4" 1 447 "0x20"
d G "T7_DIV_BY_8" 1 448 "0x30"
d G "T7_GATE" 1 450 "0x8000"
d G "T7_GATE_INVERTED" 1 451 "0xC000"
d G "T7_GATE_TOGGLE" 1 452 "0xA000"
d G "T7_GATE_SINGLE" 1 453 "0x9000"
d G "T7_GATE_TIMER8" 1 454 "0x8100"
d G "T7_GATE_COMP1" 1 455 "0x8200"
d G "T7_GATE_COMP2" 1 456 "0x8300"
c L "set_timer7" 1 1 3 "FUNCTION"
f N "setup_timer_8" 1 461 ""
v L "mode" 1 461 "int8" `203 
v L "period" 1 461 "int8" `204 
v L "postscaler" 1 461 "int8" `205 
f B "setup_timer_8" 1 461 "void(int8 mode,int8 period,int8 postscaler)" `202 
f N "get_timer8" 1 462 ""
f B "get_timer8" 1 462 "int8()" `206 
f N "set_timer8" 1 463 ""
v L "value" 1 463 "int8" `208 
f B "set_timer8" 1 463 "void(int8 value)" `207  "Constants used for SETUP_TIMER_8() are:"
d G "T8_DISABLED" 1 466 "0"
d G "T8_DIV_BY_1" 1 467 "4"
d G "T8_DIV_BY_4" 1 468 "5"
d G "T8_DIV_BY_16" 1 469 "6"
c L "set_timer8" 1 1 3 "FUNCTION"
f N "setup_timer_10" 1 474 ""
v L "mode" 1 474 "int8" `210 
v L "period" 1 474 "int8" `211 
v L "postscaler" 1 474 "int8" `212 
f B "setup_timer_10" 1 474 "void(int8 mode,int8 period,int8 postscaler)" `209 
f N "get_timer10" 1 475 ""
f B "get_timer10" 1 475 "int8()" `213 
f N "set_timer10" 1 476 ""
v L "value" 1 476 "int8" `215 
f B "set_timer10" 1 476 "void(int8 value)" `214  "Constants used for SETUP_TIMER_10() are:"
d G "T10_DISABLED" 1 479 "0"
d G "T10_DIV_BY_1" 1 480 "4"
d G "T10_DIV_BY_4" 1 481 "5"
d G "T10_DIV_BY_16" 1 482 "6"
c L "set_timer10" 1 1 3 "FUNCTION"
f N "setup_timer_12" 1 487 ""
v L "mode" 1 487 "int8" `217 
v L "period" 1 487 "int8" `218 
v L "postscaler" 1 487 "int8" `219 
f B "setup_timer_12" 1 487 "void(int8 mode,int8 period,int8 postscaler)" `216 
f N "get_timer12" 1 488 ""
f B "get_timer12" 1 488 "int8()" `220 
f N "set_timer12" 1 489 ""
v L "value" 1 489 "int8" `222 
f B "set_timer12" 1 489 "void(int8 value)" `221  "Constants used for SETUP_TIMER_12() are:"
d G "T12_DISABLED" 1 492 "0"
d G "T12_DIV_BY_1" 1 493 "4"
d G "T12_DIV_BY_4" 1 494 "5"
d G "T12_DIV_BY_16" 1 495 "6"
c L "set_timer12" 1 1 4 "FUNCTION"
c L "set_timer12" 1 1 1 "FUNCTION"
c L "set_timer12" 1 1 1 "FUNCTION"
t G "rtc_time_t" 1 511 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `233  "RTC Prototypes:"
f N "setup_rtc" 1 513 ""
v L "mode" 1 513 "int32" `235 
f B "setup_rtc" 1 513 "void(int32 mode)" `234 
f N "setup_rtc" 1 514 ""
v L "mode" 1 514 "int32" `237 
v L "calibration" 1 514 "int8" `238 
f B "setup_rtc" 1 514 "void(int32 mode,int8 calibration)" `236 
f N "setup_rtc_alarm" 1 515 ""
v L "mode" 1 515 "int8" `240 
v L "mask" 1 515 "int8" `241 
v L "repeat" 1 515 "int8" `242 
f B "setup_rtc_alarm" 1 515 "void(int8 mode,int8 mask,int8 repeat)" `239 
f N "rtc_read" 1 516 ""
v L "time" 1 516 " *" `244 
f B "rtc_read" 1 516 "void( * time)" `243 
f N "rtc_write" 1 517 ""
v L "time" 1 517 " *" `246 
f B "rtc_write" 1 517 "void( * time)" `245 
f N "rtc_alarm_read" 1 518 ""
v L "time" 1 518 " *" `248 
f B "rtc_alarm_read" 1 518 "void( * time)" `247 
f N "rtc_alarm_write" 1 519 ""
v L "time" 1 519 " *" `250 
f B "rtc_alarm_write" 1 519 "void( * time)" `249  "Constants used in setup_rtc() are:  // Second parameter is calibration"
d G "RTC_ENABLE" 1 521 "0x8000"
d G "RTC_DISABLE" 1 522 "0"
d G "RTC_OUTPUT_SOURCE" 1 523 "0x20400"
d G "RTC_OUTPUT_SECONDS" 1 524 "0x10400"
d G "RTC_OUTPUT_ALARM" 1 525 "0x00400"
d G "RTC_ALARM_ENABLE" 1 528 "0x80"
d G "RTC_ALARM_DISABLE" 1 529 "0"
d G "RTC_CHIME_ENABLE" 1 530 "0x40"
d G "RTC_CHIME_DISABLE" 1 531 "0"
d G "RTC_ALARM_HALFSECOND" 1 533 "0x00"
d G "RTC_ALARM_SECOND" 1 534 "0x04"
d G "RTC_ALARM_10_SECONDS" 1 535 "0x08"
d G "RTC_ALARM_MINUTE" 1 536 "0x0C"
d G "RTC_ALARM_10_MINUTES" 1 537 "0x10"
d G "RTC_ALARM_HOUR" 1 538 "0x14"
d G "RTC_ALARM_DAY" 1 539 "0x18"
d G "RTC_ALARM_WEEK" 1 540 "0x1C"
d G "RTC_ALARM_MONTH" 1 541 "0x20"
d G "RTC_ALARM_YEAR" 1 542 "0x24"
c L "rtc_alarm_write" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 548 ""
v L "mode" 1 548 "int32" `252 
f B "setup_ccp1" 1 548 "void(int32 mode)" `251 
f N "setup_ccp1" 1 549 ""
v L "mode" 1 549 "int32" `254 
v L "pwm" 1 549 "int8" `255 
f B "setup_ccp1" 1 549 "void(int32 mode,int8 pwm)" `253 
f N "set_pwm1_duty" 1 550 ""
v L "value" 1 550 "int8" `257 
f B "set_pwm1_duty" 1 550 "void(int8 value)" `256 
f N "set_pwm1_duty" 1 551 ""
v L "value" 1 551 "int16" `259 
f B "set_pwm1_duty" 1 551 "void(int16 value)" `258  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 553 "0"
d G "CCP_CAPTURE_FE" 1 554 "0x04"
d G "CCP_CAPTURE_RE" 1 555 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 556 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 557 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 558 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 559 "0x09"
d G "CCP_COMPARE_INT" 1 560 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 561 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 562 "0x0B"
d G "CCP_PWM" 1 563 "0x0C"
d G "CCP_PWM_PLUS_1" 1 564 "0x1c"
d G "CCP_PWM_PLUS_2" 1 565 "0x2c"
d G "CCP_PWM_PLUS_3" 1 566 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 1 576 "0x0000" "used for CCP 1 2 3 4 5 6 7 8 9 10"
d G "CCP_USE_TIMER3_AND_TIMER4" 1 577 "0x0100" "used for CCP 1 2 3 4"
d G "CCP_USE_TIMER3_AND_TIMER6" 1 578 "0x0200" "used for CCP 1 2 3 4"
d G "CCP_USE_TIMER3_AND_TIMER8" 1 579 "0x0300" "used for CCP 1 2 3"
d G "CCP_USE_TIMER3_AND_TIMER10" 1 580 "0x0400" "used for CCP 1 2"
d G "CCP_USE_TIMER3_AND_TIMER12" 1 581 "0x0500" "used for CCP 1"
d G "CCP_USE_TIMER5_AND_TIMER4" 1 582 "0x0100" "used for CCP 5 7"
d G "CCP_USE_TIMER5_AND_TIMER2" 1 583 "0x0100" "used for CCP 6"
d G "CCP_USE_TIMER5_AND_TIMER6" 1 584 "0x0200" "used for CCP 7"
d G "CCP_USE_TIMER5_AND_TIMER8" 1 585 "0x0300" "used for CCP 7"
d G "CCP_USE_TIMER7_AND_TIMER4" 1 586 "0x0100" "used for CCP 8 9"
d G "CCP_USE_TIMER7_AND_TIMER6" 1 587 "0x0200" "used for CCP 8"
d G "CCP_USE_TIMER7_AND_TIMER2" 1 588 "0x0100" "used for CCP 10"
d G "CCP_PWM_H_H" 1 591 "0x0c"
d G "CCP_PWM_H_L" 1 592 "0x0d"
d G "CCP_PWM_L_H" 1 593 "0x0e"
d G "CCP_PWM_L_L" 1 594 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 596 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 597 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 598 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 600 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 601 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 602 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 603 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 604 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 605 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 606 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 608 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 609 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 610 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 612 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 613 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 614 "0x020000"
d G "CCP_PULSE_STEERING_A" 1 617 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 618 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 619 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 620 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 621 "0x10000000"
d G "CCP_COMPLEMENTARY_AB" 1 622 "0x43000000"
d G "CCP_COMPLEMENTARY_AC" 1 623 "0x85000000"
d G "CCP_COMPLEMENTARY_AD" 1 624 "0xC9000000"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 627 ""
v L "mode" 1 627 "int32" `264 
f B "setup_ccp2" 1 627 "void(int32 mode)" `263 
f N "setup_ccp2" 1 628 ""
v L "mode" 1 628 "int32" `266 
v L "pwm" 1 628 "int8" `267 
f B "setup_ccp2" 1 628 "void(int32 mode,int8 pwm)" `265 
f N "set_pwm2_duty" 1 629 ""
v L "value" 1 629 "int8" `269 
f B "set_pwm2_duty" 1 629 "void(int8 value)" `268 
f N "set_pwm2_duty" 1 630 ""
v L "value" 1 630 "int16" `271 
f B "set_pwm2_duty" 1 630 "void(int16 value)" `270 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
f N "setup_ccp3" 1 636 ""
v L "mode" 1 636 "int32" `276 
f B "setup_ccp3" 1 636 "void(int32 mode)" `275 
f N "setup_ccp3" 1 637 ""
v L "mode" 1 637 "int32" `278 
v L "pwm" 1 637 "int8" `279 
f B "setup_ccp3" 1 637 "void(int32 mode,int8 pwm)" `277 
f N "set_pwm3_duty" 1 638 ""
v L "value" 1 638 "int8" `281 
f B "set_pwm3_duty" 1 638 "void(int8 value)" `280 
f N "set_pwm3_duty" 1 639 ""
v L "value" 1 639 "int16" `283 
f B "set_pwm3_duty" 1 639 "void(int16 value)" `282 
c L "set_pwm3_duty" 1 1 1 "FUNCTION"
f N "setup_ccp4" 1 645 ""
v L "mode" 1 645 "int32" `288 
f B "setup_ccp4" 1 645 "void(int32 mode)" `287 
f N "setup_ccp4" 1 646 ""
v L "mode" 1 646 "int32" `290 
v L "pwm" 1 646 "int8" `291 
f B "setup_ccp4" 1 646 "void(int32 mode,int8 pwm)" `289 
f N "set_pwm4_duty" 1 647 ""
v L "value" 1 647 "int8" `293 
f B "set_pwm4_duty" 1 647 "void(int8 value)" `292 
f N "set_pwm4_duty" 1 648 ""
v L "value" 1 648 "int16" `295 
f B "set_pwm4_duty" 1 648 "void(int16 value)" `294 
c L "set_pwm4_duty" 1 1 1 "FUNCTION"
f N "setup_ccp5" 1 654 ""
v L "mode" 1 654 "int32" `300 
f B "setup_ccp5" 1 654 "void(int32 mode)" `299 
f N "setup_ccp5" 1 655 ""
v L "mode" 1 655 "int32" `302 
v L "pwm" 1 655 "int8" `303 
f B "setup_ccp5" 1 655 "void(int32 mode,int8 pwm)" `301 
f N "set_pwm5_duty" 1 656 ""
v L "value" 1 656 "int8" `305 
f B "set_pwm5_duty" 1 656 "void(int8 value)" `304 
f N "set_pwm5_duty" 1 657 ""
v L "value" 1 657 "int16" `307 
f B "set_pwm5_duty" 1 657 "void(int16 value)" `306 
c L "set_pwm5_duty" 1 1 1 "FUNCTION"
f N "setup_ccp6" 1 663 ""
v L "mode" 1 663 "int32" `312 
f B "setup_ccp6" 1 663 "void(int32 mode)" `311 
f N "setup_ccp6" 1 664 ""
v L "mode" 1 664 "int32" `314 
v L "pwm" 1 664 "int8" `315 
f B "setup_ccp6" 1 664 "void(int32 mode,int8 pwm)" `313 
f N "set_pwm6_duty" 1 665 ""
v L "value" 1 665 "int8" `317 
f B "set_pwm6_duty" 1 665 "void(int8 value)" `316 
f N "set_pwm6_duty" 1 666 ""
v L "value" 1 666 "int16" `319 
f B "set_pwm6_duty" 1 666 "void(int16 value)" `318 
c L "set_pwm6_duty" 1 1 1 "FUNCTION"
f N "setup_ccp7" 1 672 ""
v L "mode" 1 672 "int32" `324 
f B "setup_ccp7" 1 672 "void(int32 mode)" `323 
f N "setup_ccp7" 1 673 ""
v L "mode" 1 673 "int32" `326 
v L "pwm" 1 673 "int8" `327 
f B "setup_ccp7" 1 673 "void(int32 mode,int8 pwm)" `325 
f N "set_pwm7_duty" 1 674 ""
v L "value" 1 674 "int8" `329 
f B "set_pwm7_duty" 1 674 "void(int8 value)" `328 
f N "set_pwm7_duty" 1 675 ""
v L "value" 1 675 "int16" `331 
f B "set_pwm7_duty" 1 675 "void(int16 value)" `330 
c L "set_pwm7_duty" 1 1 1 "FUNCTION"
f N "setup_ccp8" 1 681 ""
v L "mode" 1 681 "int32" `336 
f B "setup_ccp8" 1 681 "void(int32 mode)" `335 
f N "setup_ccp8" 1 682 ""
v L "mode" 1 682 "int32" `338 
v L "pwm" 1 682 "int8" `339 
f B "setup_ccp8" 1 682 "void(int32 mode,int8 pwm)" `337 
f N "set_pwm8_duty" 1 683 ""
v L "value" 1 683 "int8" `341 
f B "set_pwm8_duty" 1 683 "void(int8 value)" `340 
f N "set_pwm8_duty" 1 684 ""
v L "value" 1 684 "int16" `343 
f B "set_pwm8_duty" 1 684 "void(int16 value)" `342 
c L "set_pwm8_duty" 1 1 1 "FUNCTION"
f N "setup_ccp9" 1 690 ""
v L "mode" 1 690 "int32" `348 
f B "setup_ccp9" 1 690 "void(int32 mode)" `347 
f N "setup_ccp9" 1 691 ""
v L "mode" 1 691 "int32" `350 
v L "pwm" 1 691 "int8" `351 
f B "setup_ccp9" 1 691 "void(int32 mode,int8 pwm)" `349 
f N "set_pwm9_duty" 1 692 ""
v L "value" 1 692 "int8" `353 
f B "set_pwm9_duty" 1 692 "void(int8 value)" `352 
f N "set_pwm9_duty" 1 693 ""
v L "value" 1 693 "int16" `355 
f B "set_pwm9_duty" 1 693 "void(int16 value)" `354 
c L "set_pwm9_duty" 1 1 1 "FUNCTION"
f N "setup_ccp10" 1 699 ""
v L "mode" 1 699 "int32" `360 
f B "setup_ccp10" 1 699 "void(int32 mode)" `359 
f N "setup_ccp10" 1 700 ""
v L "mode" 1 700 "int32" `362 
v L "pwm" 1 700 "int8" `363 
f B "setup_ccp10" 1 700 "void(int32 mode,int8 pwm)" `361 
f N "set_pwm10_duty" 1 701 ""
v L "value" 1 701 "int8" `365 
f B "set_pwm10_duty" 1 701 "void(int8 value)" `364 
f N "set_pwm10_duty" 1 702 ""
v L "value" 1 702 "int16" `367 
f B "set_pwm10_duty" 1 702 "void(int16 value)" `366 
c L "set_pwm10_duty" 1 1 5 "FUNCTION"
f N "setup_psp" 1 712 ""
v L "mode" 1 712 "int8" `372 
f B "setup_psp" 1 712 "void(int8 mode)" `371 
f N "psp_output_full" 1 713 ""
f B "psp_output_full" 1 713 "int8()" `373 
f N "psp_input_full" 1 714 ""
f B "psp_input_full" 1 714 "int8()" `374 
f N "psp_overflow" 1 715 ""
f B "psp_overflow" 1 715 "int8()" `375  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 717 "0x10"
d G "PSP_DISABLED" 1 718 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
f N "setup_spi" 1 725 ""
v L "mode" 1 725 "int32" `378 
f B "setup_spi" 1 725 "void(int32 mode)" `377 
f N "spi_write" 1 726 ""
v L "value" 1 726 "int8" `380 
f B "spi_write" 1 726 "void(int8 value)" `379 
f N "spi_write" 1 727 ""
v L "wait" 1 727 "int8" `382 
v L "value" 1 727 "int8" `383 
f B "spi_write" 1 727 "void(int8 wait,int8 value)" `381 
f N "spi_read" 1 728 ""
f B "spi_read" 1 728 "int8()" `384 
f N "spi_read" 1 729 ""
v L "value" 1 729 "int8" `386 
f B "spi_read" 1 729 "int8(int8 value)" `385 
f N "spi_data_is_in" 1 730 ""
f B "spi_data_is_in" 1 730 "int8()" `387 
f N "setup_spi2" 1 731 ""
v L "mode" 1 731 "int32" `389 
f B "setup_spi2" 1 731 "void(int32 mode)" `388 
f N "spi_write2" 1 732 ""
v L "value" 1 732 "int8" `391 
f B "spi_write2" 1 732 "void(int8 value)" `390 
f N "spi_read2" 1 733 ""
f B "spi_read2" 1 733 "int8()" `392 
f N "spi_read2" 1 734 ""
v L "value" 1 734 "int8" `394 
f B "spi_read2" 1 734 "int8(int8 value)" `393 
f N "spi_data_is_in2" 1 735 ""
f B "spi_data_is_in2" 1 735 "int8()" `395  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 737 "0x00"
d G "SPI_MASTER" 1 738 "0x20"
d G "SPI_SLAVE" 1 739 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 740 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 741 "0x00"
d G "SPI_CLK_DIV_4" 1 742 "0x00"
d G "SPI_CLK_DIV_8" 1 743 "0x0A"
d G "SPI_CLK_DIV_16" 1 744 "0x01"
d G "SPI_CLK_DIV_64" 1 745 "0x02"
d G "SPI_CLK_T2" 1 746 "0x03"
d G "SPI_SS_DISABLED" 1 747 "0x01"
d G "SPI_XMIT_L_TO_H" 1 749 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 750 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 752 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 753 "0x8000"
d G "SPI_L_TO_H" 1 756 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 757 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 1 2 "FUNCTION"
f N "setup_uart" 1 761 ""
v L "baud" 1 761 "int32" `397 
f B "setup_uart" 1 761 "void(int32 baud)" `396 
f N "setup_uart" 1 762 ""
v L "baud" 1 762 "int32" `399 
v L "stream" 1 762 "int8" `400 
f B "setup_uart" 1 762 "void(int32 baud,int8 stream)" `398 
f N "setup_uart" 1 763 ""
v L "baud" 1 763 "int32" `402 
v L "stream" 1 763 "int8" `403 
v L "clock" 1 763 "int32" `404 
f B "setup_uart" 1 763 "void(int32 baud,int8 stream,int32 clock)" `401 
f N "set_uart_speed" 1 764 ""
v L "baud" 1 764 "int32" `406 
f B "set_uart_speed" 1 764 "void(int32 baud)" `405 
f N "set_uart_speed" 1 765 ""
v L "baud" 1 765 "int32" `408 
v L "stream" 1 765 "int8" `409 
f B "set_uart_speed" 1 765 "void(int32 baud,int8 stream)" `407 
f N "set_uart_speed" 1 766 ""
v L "baud" 1 766 "int32" `411 
v L "stream" 1 766 "int8" `412 
v L "clock" 1 766 "int32" `413 
f B "set_uart_speed" 1 766 "void(int32 baud,int8 stream,int32 clock)" `410  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 770 "2"
d G "UART_DATA" 1 771 "4"
d G "UART_AUTODETECT" 1 772 "8"
d G "UART_AUTODETECT_NOWAIT" 1 773 "9"
d G "UART_WAKEUP_ON_RDA" 1 774 "10"
d G "UART_SEND_BREAK" 1 775 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
f N "setup_comparator" 1 780 ""
v L "mode" 1 780 "int32" `415 
f B "setup_comparator" 1 780 "void(int32 mode)" `414  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 783 "0x040404"
d G "NC_NC" 1 784 "0x040404"
d G "CP1_F5_F6" 1 787 "0x000080"
d G "CP1_H6_F6" 1 788 "0x000081"
d G "CP1_F3_F6" 1 789 "0x000082"
d G "CP1_VBG_F6" 1 790 "0x000083"
d G "CP1_F5_VREF" 1 791 "0x000084"
d G "CP1_H6_VREF" 1 792 "0x000085"
d G "CP1_F3_VREF" 1 793 "0x000086"
d G "CP1_VBG_VREF" 1 794 "0x000087"
d G "CP1_OUT_ON_F2" 1 796 "0x000040"
d G "CP1_INVERT" 1 797 "0x000020"
d G "CP1_INT_L2H" 1 798 "0x000008"
d G "CP1_INT_H2L" 1 799 "0x000010"
d G "CP2_F3_F4" 1 802 "0x008000"
d G "CP2_H4_F4" 1 803 "0x008100"
d G "CP2_H5_F4" 1 804 "0x008200"
d G "CP2_VBG_F4" 1 805 "0x008300"
d G "CP2_F3_VREF" 1 806 "0x008400"
d G "CP2_H4_VREF" 1 807 "0x008500"
d G "CP2_H5_VREF" 1 808 "0x008600"
d G "CP2_VBG_VREF" 1 809 "0x008700"
d G "CP2_OUT_ON_F1" 1 811 "0x004000"
d G "CP2_INVERT" 1 812 "0x002000"
d G "CP2_INT_L2H" 1 813 "0x000800"
d G "CP2_INT_H2L" 1 814 "0x001000"
d G "CP3_G3_G2" 1 817 "0x800000"
d G "CP3_G4_G2" 1 818 "0x810000"
d G "CP3_F3_G2" 1 819 "0x820000"
d G "CP3_VBG_G2" 1 820 "0x830000"
d G "CP3_G3_VREF" 1 821 "0x840000"
d G "CP3_G4_VREF" 1 822 "0x850000"
d G "CP3_F3_VREF" 1 823 "0x860000"
d G "CP3_VBG_VREF" 1 824 "0x870000"
d G "CP3_OUT_ON_G1" 1 826 "0x400000"
d G "CP3_INVERT" 1 827 "0x200000"
d G "CP3_INT_L2H" 1 828 "0x080000"
d G "CP3_INT_H2L" 1 829 "0x100000"
c L "setup_comparator" 1 1 2 "FUNCTION"
f N "setup_vref" 1 837 ""
v L "mode" 1 837 "int16" `420 
f B "setup_vref" 1 837 "void(int16 mode)" `419  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 839 "0xA0"
d G "VREF_HIGH" 1 840 "0x80"
d G "VREF_EXT" 1 841 "0x10" "Range for ref gen VREF- to VREF+"
d G "VREF_FVR" 1 842 "0x8000"
c L "setup_vref" 1 1 3 "FUNCTION"
f N "setup_low_volt_detect" 1 847 ""
v L "mode" 1 847 "int8" `422 
f B "setup_low_volt_detect" 1 847 "void(int8 mode)" `421  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 849 "0x1F"
d G "LVD_45" 1 850 "0x1E"
d G "LVD_42" 1 851 "0x1D"
d G "LVD_40" 1 852 "0x1C"
d G "LVD_38" 1 853 "0x1B"
d G "LVD_36" 1 854 "0x1A"
d G "LVD_35" 1 855 "0x19"
d G "LVD_33" 1 856 "0x18"
d G "LVD_30" 1 857 "0x17"
d G "LVD_28" 1 858 "0x16"
d G "LVD_27" 1 859 "0x15"
d G "LVD_25" 1 860 "0x14"
d G "LVD_24" 1 861 "0x13"
d G "LVD_23" 1 862 "0x12"
d G "LVD_22" 1 863 "0x11"
d G "LVD_21" 1 864 "0x10"
d G "LVD_TRIGGER_BELOW" 1 866 "0"
d G "LVD_TRIGGER_ABOVE" 1 867 "0x80"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
f N "setup_oscillator" 1 872 ""
v L "mode" 1 872 "int16" `424 
f B "setup_oscillator" 1 872 "int8(int16 mode)" `423 
f N "setup_oscillator" 1 873 ""
v L "mode" 1 873 "int16" `426 
v L "tune" 1 873 "sint8" `427 
f B "setup_oscillator" 1 873 "int8(int16 mode,sint8 tune)" `425  "Constants used in setup_oscillator() are:"
d G "OSC_31250" 1 875 "0x8000"
d G "OSC_PLL_ON" 1 876 "0x4000"
d G "OSC_PLL_OFF" 1 877 "0"
d G "OSC_31KHZ" 1 878 "0"
d G "OSC_250KHZ" 1 879 "0x10"
d G "OSC_500KHZ" 1 880 "0x20"
d G "OSC_1MHZ" 1 881 "0x30"
d G "OSC_2MHZ" 1 882 "0x40"
d G "OSC_4MHZ" 1 883 "0x50"
d G "OSC_8MHZ" 1 884 "0x60"
d G "OSC_16MHZ" 1 885 "0x70"
d G "OSC_SOSC" 1 887 "1"
d G "OSC_INTRC" 1 888 "2"
d G "OSC_NORMAL" 1 889 "0"
d G "OSC_IDLE_MODE" 1 891 "0x80"
d G "OSC_MFINTRC_ON" 1 893 "0x10000" "MF-INTOSC used instead of HF-INTOSC for 500KHZ, 250KHZ and 31KHZ operating frequencies."
d G "OSC_SOSC_ON" 1 894 "0x80000"
d G "OSC_STATE_STABLE" 1 898 "4"
d G "OSC_STATE_PRIMARY_RUNNING" 1 899 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
f N "setup_external_memory" 1 905 ""
v L "mode" 1 905 "int8" `429 
f B "setup_external_memory" 1 905 "void(int8 mode)" `428 
f N "read_external_memory" 1 906 ""
v L "address" 1 906 "int32" `431 
v L "ptr" 1 906 "*int8" `432 
v L "count" 1 906 "int16" `433 
f B "read_external_memory" 1 906 "void(int32 address,*int8 ptr,int16 count)" `430 
f N "write_external_memory" 1 907 ""
v L "address" 1 907 "int32" `435 
v L "ptr" 1 907 "*int8" `436 
v L "count" 1 907 "int16" `437 
f B "write_external_memory" 1 907 "void(int32 address,*int8 ptr,int16 count)" `434  "Constants used in SETUP_EXTERNAL_MEMORY() are:"
d G "EXTMEM_BYTE_WRITE" 1 909 "0"
d G "EXTMEM_BYTE_SELECT" 1 910 "1"
d G "EXTMEM_WORD_WRITE" 1 911 "2"
d G "EXTMEM_DISABLE" 1 912 "0x80"
d G "EXTMEM_WAIT_0" 1 914 "0x30"
d G "EXTMEM_WAIT_1" 1 915 "0x20"
d G "EXTMEM_WAIT_2" 1 916 "0x10"
d G "EXTMEM_WAIT_3" 1 917 "0x00" "Default"
c L "write_external_memory" 1 1 4 "FUNCTION"
f N "setup_adc" 1 924 ""
v L "mode" 1 924 "int16" `439 
f B "setup_adc" 1 924 "void(int16 mode)" `438 
f N "read_adc" 1 925 ""
f B "read_adc" 1 925 "int8()" `440 
f N "read_adc" 1 926 ""
v L "mode" 1 926 "int8" `442 
f B "read_adc" 1 926 "int8(int8 mode)" `441 
f N "read_adc" 1 927 ""
f G "read_adc" 1 927 "int16()" `443 
f N "read_adc" 1 928 ""
v L "mode" 1 928 "int8" `444 
f G "read_adc" 1 928 "int16(int8 mode,int32 pins)" `443 
f N "adc_done" 1 929 ""
f B "adc_done" 1 929 "int8(int8 mode,int32 pins)" `443  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 931 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 932 "0x100"
d G "ADC_CLOCK_DIV_4" 1 933 "0x04"
d G "ADC_CLOCK_DIV_8" 1 934 "0x01"
d G "ADC_CLOCK_DIV_16" 1 935 "0x05"
d G "ADC_CLOCK_DIV_32" 1 936 "0x02"
d G "ADC_CLOCK_DIV_64" 1 937 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 938 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 940 "0x00"
d G "ADC_TAD_MUL_2" 1 941 "0x08"
d G "ADC_TAD_MUL_4" 1 942 "0x10"
d G "ADC_TAD_MUL_6" 1 943 "0x18"
d G "ADC_TAD_MUL_8" 1 944 "0x20"
d G "ADC_TAD_MUL_12" 1 945 "0x28"
d G "ADC_TAD_MUL_16" 1 946 "0x30"
d G "ADC_TAD_MUL_20" 1 947 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 950 ""
v L "pins" 1 950 "int32" `445 
f B "setup_adc_ports" 1 950 "void(int32 pins)" `444 
f N "setup_adc_ports" 1 951 ""
v L "pins" 1 951 "int32" `447 
v L "reference" 1 951 "int32" `448 
f B "setup_adc_ports" 1 951 "void(int32 pins,int32 reference)" `446 
f N "set_analog_pins" 1 952 ""
v L "pins" 1 952 "int32" `450 
f B "set_analog_pins" 1 952 "void(int32 pins)" `449 
f N "set_analog_pins" 1 953 ""
v L "int32pins" 1 953 "int8" `452 
v L "reference" 1 953 "int32" `453 
f B "set_analog_pins" 1 953 "void(int8 int32pins,int32 reference)" `451 
f N "set_adc_channel" 1 954 ""
v L "pos_channel" 1 954 "int8" `455 
f B "set_adc_channel" 1 954 "void(int8 pos_channel)" `454 
f N "set_adc_channel" 1 955 ""
v L "pos_channel" 1 955 "int8" `457 
v L "neg_channel" 1 955 "int8" `458 
f B "set_adc_channel" 1 955 "void(int8 pos_channel,int8 neg_channel)" `456  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 1 959 "0x00000100" "| A0"
d G "sAN1" 1 960 "0x00000200" "| A1"
d G "sAN2" 1 961 "0x00000400" "| A2"
d G "sAN3" 1 962 "0x00000800" "| A3"
d G "sAN4" 1 963 "0x00001000" "| A5"
d G "sAN5" 1 964 "0x00002000" "| F7"
d G "sAN6" 1 965 "0x00004000" "| F1"
d G "sAN7" 1 966 "0x00008000" "| F3"
d G "sAN8" 1 967 "0x00010000" "| F3"
d G "sAN9" 1 968 "0x00020000" "| F4"
d G "sAN10" 1 969 "0x00040000" "| F5"
d G "sAN11" 1 970 "0x00080000" "| F6"
d G "sAN12" 1 971 "0x00100000" "| H4"
d G "sAN13" 1 972 "0x00200000" "| H5"
d G "sAN14" 1 973 "0x00400000" "| H6"
d G "sAN15" 1 974 "0x00800000" "| H7"
d G "sAN16" 1 975 "0x01000000" "| G4"
d G "sAN17" 1 976 "0x02000000" "| G3"
d G "sAN18" 1 977 "0x04000000" "| G2"
d G "sAN19" 1 978 "0x08000000" "| G1"
d G "sAN20" 1 979 "0x10000000" "| H3"
d G "sAN21" 1 980 "0x20000000" "| H2"
d G "sAN22" 1 981 "0x40000000" "| H1"
d G "sAN23" 1 982 "0x80000000" "| H0"
d G "NO_ANALOGS" 1 983 "0" "None"
d G "ALL_ANALOG" 1 984 "0xFFFFFF00" "A0 A1 A2 A3 A5 F7 F1 F2 F3 F4 F5 F6 H4 H5 H6 H7 G4 G3 G2 G1 H3 H2 H1 H0"
d G "VSS_VDD" 1 987 "0x00" "| Range 0-Vdd"
d G "VSS_VREF" 1 988 "0x10" "| Range 0-VrefH"
d G "VSS_2V048" 1 989 "0x20" "| Range 0-2.048V"
d G "VSS_4V096" 1 990 "0x30" "| Range 0-4.096V"
d G "VREF_VDD" 1 991 "0x08" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 992 "0x18" "| Range VrefL-VrefH"
d G "VREF_2V048" 1 993 "0x28" "| Range VrefL-2.048V"
d G "VREF_4V096" 1 994 "0x38" "| Range VrefL-4.096V"
d G "VSS" 1 997 "0xFF" "Analog Negative Channel connected to Vss"
d G "ADC_START_AND_READ" 1 1000 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 1001 "1"
d G "ADC_READ_ONLY" 1 1002 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 1008 ""
v L "x" 1 1008 "sint8" `460 
f B "abs" 1 1008 "sint8(sint8 x)" `459 
f N "abs" 1 1009 ""
v L "x" 1 1009 "sint16" `462 
f B "abs" 1 1009 "sint16(sint16 x)" `461 
f N "abs" 1 1010 ""
v L "x" 1 1010 "sint32" `464 
f B "abs" 1 1010 "sint32(sint32 x)" `463 
f N "abs" 1 1011 ""
v L "x" 1 1011 "float" `466 
f B "abs" 1 1011 "float(float x)" `465 
f N "_mul" 1 1012 ""
v L "??65535" 1 1012 "int8" `468 
v L "??65535" 1 1012 "int8" `469 
f B "_mul" 1 1012 "int16(int8 ,int8 )" `467 
f N "_mul" 1 1013 ""
v L "??65535" 1 1013 "sint8" `471 
v L "??65535" 1 1013 "sint8" `472 
f B "_mul" 1 1013 "sint16(sint8 ,sint8 )" `470 
f N "_mul" 1 1014 ""
v L "??65535" 1 1014 "int16" `474 
v L "??65535" 1 1014 "int16" `475 
f B "_mul" 1 1014 "int32(int16 ,int16 )" `473 
f N "_mul" 1 1015 ""
v L "??65535" 1 1015 "sint16" `477 
v L "??65535" 1 1015 "sint16" `478 
f B "_mul" 1 1015 "sint32(sint16 ,sint16 )" `476  "Memory Manipulation Prototypes:"
f N "read_bank" 1 1018 ""
v L "bank" 1 1018 "int8" `480 
v L "offset" 1 1018 "int8" `481 
f B "read_bank" 1 1018 "int8(int8 bank,int8 offset)" `479 
f N "write_bank" 1 1019 ""
v L "bank" 1 1019 "int8" `483 
v L "offset" 1 1019 "int8" `484 
v L "value" 1 1019 "int8" `485 
f B "write_bank" 1 1019 "void(int8 bank,int8 offset,int8 value)" `482 
f N "strcpy" 1 1020 ""
v L "dest" 1 1020 "*int8" `487 
v L "src" 1 1020 "*int8" `488 
f B "strcpy" 1 1020 "void(*int8 dest,*int8 src)" `486 
f N "memset" 1 1021 ""
v L "destination" 1 1021 "*int8" `490 
v L "value" 1 1021 "int8" `491 
v L "num" 1 1021 "int16" `492 
f B "memset" 1 1021 "void(*int8 destination,int8 value,int16 num)" `489 
f N "memcpy" 1 1022 ""
v L "destination" 1 1022 "*int8" `494 
v L "source" 1 1022 "*int8" `495 
v L "num" 1 1022 "int16" `496 
f B "memcpy" 1 1022 "void(*int8 destination,*int8 source,int16 num)" `493  "String Prototypes:"
f N "toupper" 1 1025 ""
v L "cvalue" 1 1025 "int8" `498 
f B "toupper" 1 1025 "int8(int8 cvalue)" `497 
f N "tolower" 1 1026 ""
v L "cvalue" 1 1026 "int8" `500 
f B "tolower" 1 1026 "int8(int8 cvalue)" `499 
f N "sprintf" 1 1027 ""
v L "string" 1 1027 "*int8" `502 
v L "cstring" 1 1027 "*int8" `503 
f B "sprintf" 1 1027 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `501  "Data Manipulators Prototypes:"
f N "shift_left" 1 1030 ""
v L "address" 1 1030 "*int8" `506 
v L "bytes" 1 1030 "int8" `507 
v L "value" 1 1030 "int8" `508 
f B "shift_left" 1 1030 "int8(*int8 address,int8 bytes,int8 value)" `505 
f N "shift_right" 1 1031 ""
v L "address" 1 1031 "*int8" `510 
v L "bytes" 1 1031 "int8" `511 
v L "value" 1 1031 "int8" `512 
f B "shift_right" 1 1031 "int8(*int8 address,int8 bytes,int8 value)" `509 
f N "rotate_left" 1 1032 ""
v L "address" 1 1032 "*int8" `514 
v L "bytes" 1 1032 "int8" `515 
f B "rotate_left" 1 1032 "void(*int8 address,int8 bytes)" `513 
f N "rotate_right" 1 1033 ""
v L "address" 1 1033 "*int8" `517 
v L "bytes" 1 1033 "int8" `518 
f B "rotate_right" 1 1033 "void(*int8 address,int8 bytes)" `516 
f N "swap" 1 1034 ""
v L "value" 1 1034 "int8" `520 
f B "swap" 1 1034 "void(int8 value)" `519 
f N "make8" 1 1035 ""
v L "var" 1 1035 "int16" `522 
v L "offset" 1 1035 "int8" `523 
f B "make8" 1 1035 "int8(int16 var,int8 offset)" `521 
f N "make8" 1 1036 ""
v L "var" 1 1036 "int32" `525 
v L "offset" 1 1036 "int8" `526 
f B "make8" 1 1036 "int8(int32 var,int8 offset)" `524 
f N "make16" 1 1037 ""
v L "varhigh" 1 1037 "int8" `528 
v L "varlow" 1 1037 "int8" `529 
f B "make16" 1 1037 "int16(int8 varhigh,int8 varlow)" `527 
f N "make32" 1 1038 ""
v L "var1" 1 1038 "int16" `531 
f B "make32" 1 1038 "int32(int16 var1)" `530 
f N "make32" 1 1039 ""
v L "var1" 1 1039 "int16" `533 
v L "var2" 1 1039 "int16" `534 
f B "make32" 1 1039 "int32(int16 var1,int16 var2)" `532 
f N "make32" 1 1040 ""
v L "var1" 1 1040 "int16" `536 
v L "var2" 1 1040 "int8" `537 
f B "make32" 1 1040 "int32(int16 var1,int8 var2)" `535 
f N "make32" 1 1041 ""
v L "var1" 1 1041 "int16" `539 
v L "var2" 1 1041 "int8" `540 
v L "var3" 1 1041 "int8" `541 
f B "make32" 1 1041 "int32(int16 var1,int8 var2,int8 var3)" `538 
f N "make32" 1 1042 ""
v L "var1" 1 1042 "int8" `543 
f B "make32" 1 1042 "int32(int8 var1)" `542 
f N "make32" 1 1043 ""
v L "var1" 1 1043 "int8" `545 
v L "var2" 1 1043 "int8" `546 
f B "make32" 1 1043 "int32(int8 var1,int8 var2)" `544 
f N "make32" 1 1044 ""
v L "var1" 1 1044 "int8" `548 
v L "var2" 1 1044 "int8" `549 
v L "var3" 1 1044 "int8" `550 
f B "make32" 1 1044 "int32(int8 var1,int8 var2,int8 var3)" `547 
f N "make32" 1 1045 ""
v L "var1" 1 1045 "int8" `552 
v L "var2" 1 1045 "int8" `553 
v L "var3" 1 1045 "int8" `554 
v L "var4" 1 1045 "int8" `555 
f B "make32" 1 1045 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `551 
f N "make32" 1 1046 ""
v L "var1" 1 1046 "int8" `557 
v L "var2" 1 1046 "int16" `558 
f B "make32" 1 1046 "int32(int8 var1,int16 var2)" `556 
f N "make32" 1 1047 ""
v L "var1" 1 1047 "int8" `560 
v L "var2" 1 1047 "int16" `561 
v L "var3" 1 1047 "int8" `562 
f B "make32" 1 1047 "int32(int8 var1,int16 var2,int8 var3)" `559 
f N "make32" 1 1048 ""
v L "var1" 1 1048 "int8" `564 
v L "var2" 1 1048 "int8" `565 
v L "var3" 1 1048 "int16" `566 
f B "make32" 1 1048 "int32(int8 var1,int8 var2,int16 var3)" `563 
f N "bit_set" 1 1049 ""
v L "var" 1 1049 "int8" `568 
v L "bit" 1 1049 "int8" `569 
f B "bit_set" 1 1049 "void(int8 var,int8 bit)" `567 
f N "bit_set" 1 1050 ""
v L "var" 1 1050 "int16" `571 
v L "bit" 1 1050 "int8" `572 
f B "bit_set" 1 1050 "void(int16 var,int8 bit)" `570 
f N "bit_set" 1 1051 ""
v L "var" 1 1051 "int32" `574 
v L "bit" 1 1051 "int8" `575 
f B "bit_set" 1 1051 "void(int32 var,int8 bit)" `573 
f N "bit_clear" 1 1052 ""
v L "var" 1 1052 "int8" `577 
v L "bit" 1 1052 "int8" `578 
f B "bit_clear" 1 1052 "void(int8 var,int8 bit)" `576 
f N "bit_clear" 1 1053 ""
v L "var" 1 1053 "int16" `580 
v L "bit" 1 1053 "int8" `581 
f B "bit_clear" 1 1053 "void(int16 var,int8 bit)" `579 
f N "bit_clear" 1 1054 ""
v L "var" 1 1054 "int32" `583 
v L "bit" 1 1054 "int8" `584 
f B "bit_clear" 1 1054 "void(int32 var,int8 bit)" `582 
f N "bit_test" 1 1055 ""
v L "var" 1 1055 "int8" `586 
v L "bit" 1 1055 "int8" `587 
f B "bit_test" 1 1055 "int8(int8 var,int8 bit)" `585 
f N "bit_test" 1 1056 ""
v L "var" 1 1056 "int16" `589 
v L "bit" 1 1056 "int8" `590 
f B "bit_test" 1 1056 "int8(int16 var,int8 bit)" `588 
f N "bit_test" 1 1057 ""
v L "var" 1 1057 "int32" `592 
v L "bit" 1 1057 "int8" `593 
f B "bit_test" 1 1057 "int8(int32 var,int8 bit)" `591  "#use delay() Prototypes:"
f N "delay_cycles" 1 1060 ""
v L "count" 1 1060 "int8" `595 
f B "delay_cycles" 1 1060 "void(int8 count)" `594 
f N "delay_ms" 1 1061 ""
v L "time" 1 1061 "int16" `597 
f B "delay_ms" 1 1061 "void(int16 time)" `596 
f N "delay_us" 1 1062 ""
v L "time" 1 1062 "int16" `599 
f B "delay_us" 1 1062 "void(int16 time)" `598  "#use rs232() Prototypes:"
f N "putchar" 1 1065 ""
v L "cdata" 1 1065 "int8" `601 
f B "putchar" 1 1065 "void(int8 cdata)" `600 
f N "putchar" 1 1066 ""
v L "cdata" 1 1066 "int8" `603 
v L "stream" 1 1066 "int8" `604 
f B "putchar" 1 1066 "void(int8 cdata,int8 stream)" `602 
f N "puts" 1 1067 ""
v L "string" 1 1067 "*int8" `606 
f B "puts" 1 1067 "void(*int8 string)" `605 
f N "puts" 1 1068 ""
v L "string" 1 1068 "*int8" `608 
v L "stream" 1 1068 "int8" `609 
f B "puts" 1 1068 "void(*int8 string,int8 stream)" `607 
f N "getch" 1 1069 ""
f B "getch" 1 1069 "int8()" `610 
f N "getch" 1 1070 ""
v L "stream" 1 1070 "int8" `612 
f B "getch" 1 1070 "int8(int8 stream)" `611 
f N "gets" 1 1071 ""
v L "string" 1 1071 "*int8" `614 
f B "gets" 1 1071 "void(*int8 string)" `613 
f N "gets" 1 1072 ""
v L "string" 1 1072 "*int8" `616 
v L "stream" 1 1072 "int8" `617 
f B "gets" 1 1072 "void(*int8 string,int8 stream)" `615 
f N "kbhit" 1 1073 ""
f B "kbhit" 1 1073 "int8()" `618 
f N "kbhit" 1 1074 ""
v L "stream" 1 1074 "int8" `620 
f B "kbhit" 1 1074 "int8(int8 stream)" `619 
f N "printf" 1 1075 ""
v L "string" 1 1075 "*int8" `622 
f B "printf" 1 1075 "void(*int8 string,*int8 _VA_LIST)" `621 
f N "fprintf" 1 1076 ""
v L "stream" 1 1076 "int8" `625 
v L "string" 1 1076 "*int8" `626 
f B "fprintf" 1 1076 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `624 
f N "putc_send" 1 1077 ""
f B "putc_send" 1 1077 "void()" `628 
f N "fputc_send" 1 1078 ""
v L "stream" 1 1078 "int8" `630 
f B "fputc_send" 1 1078 "void(int8 stream)" `629 
f N "rcv_buffer_full" 1 1079 ""
f B "rcv_buffer_full" 1 1079 "int8()" `631 
f N "rcv_buffer_full" 1 1080 ""
v L "stream" 1 1080 "int8" `633 
f B "rcv_buffer_full" 1 1080 "int8(int8 stream)" `632 
f N "rcv_buffer_bytes" 1 1081 ""
f B "rcv_buffer_bytes" 1 1081 "int16()" `634 
f N "rcv_buffer_bytes" 1 1082 ""
v L "stream" 1 1082 "int8" `636 
f B "rcv_buffer_bytes" 1 1082 "int16(int8 stream)" `635 
f N "tx_buffer_full" 1 1083 ""
f B "tx_buffer_full" 1 1083 "int8()" `637 
f N "tx_buffer_full" 1 1084 ""
v L "stream" 1 1084 "int8" `639 
f B "tx_buffer_full" 1 1084 "int8(int8 stream)" `638 
f N "tx_buffer_bytes" 1 1085 ""
f B "tx_buffer_bytes" 1 1085 "int16()" `640 
f N "tx_buffer_bytes" 1 1086 ""
v L "stream" 1 1086 "int8" `642 
f B "tx_buffer_bytes" 1 1086 "int16(int8 stream)" `641  "#use i2c() Prototypes:"
f N "i2c_read" 1 1089 ""
f B "i2c_read" 1 1089 "int8()" `643 
f N "i2c_read" 1 1090 ""
v L "ack" 1 1090 "int8" `645 
f B "i2c_read" 1 1090 "int8(int8 ack)" `644 
f N "i2c_read" 1 1091 ""
v L "stream" 1 1091 "int8" `647 
v L "ack" 1 1091 "int8" `648 
f B "i2c_read" 1 1091 "int8(int8 stream,int8 ack)" `646 
f N "i2c_write" 1 1092 ""
v L "data" 1 1092 "int8" `650 
f B "i2c_write" 1 1092 "int8(int8 data)" `649 
f N "i2c_write" 1 1093 ""
v L "stream" 1 1093 "int8" `652 
v L "data" 1 1093 "int8" `653 
f B "i2c_write" 1 1093 "int8(int8 stream,int8 data)" `651 
f N "i2c_start" 1 1094 ""
f B "i2c_start" 1 1094 "void()" `654 
f N "i2c_start" 1 1095 ""
v L "stream" 1 1095 "int8" `656 
f B "i2c_start" 1 1095 "void(int8 stream)" `655 
f N "i2c_start" 1 1096 ""
v L "stream" 1 1096 "int8" `658 
v L "restart" 1 1096 "int8" `659 
f B "i2c_start" 1 1096 "void(int8 stream,int8 restart)" `657 
f N "i2c_stop" 1 1097 ""
f B "i2c_stop" 1 1097 "void()" `660 
f N "i2c_stop" 1 1098 ""
v L "stream" 1 1098 "int8" `662 
f B "i2c_stop" 1 1098 "void(int8 stream)" `661 
f N "i2c_isr_state" 1 1099 ""
f B "i2c_isr_state" 1 1099 "int8()" `663 
f N "i2c_slaveaddr" 1 1100 ""
v L "addr" 1 1100 "int8" `665 
f B "i2c_slaveaddr" 1 1100 "void(int8 addr)" `664 
f N "i2c_slaveaddr" 1 1101 ""
v L "stream" 1 1101 "int8" `667 
v L "addr" 1 1101 "int8" `668 
f B "i2c_slaveaddr" 1 1101 "void(int8 stream,int8 addr)" `666 
f N "i2c_poll" 1 1102 ""
f B "i2c_poll" 1 1102 "int8()" `669 
f N "i2c_poll" 1 1103 ""
v L "stream" 1 1103 "int8" `671 
f B "i2c_poll" 1 1103 "int8(int8 stream)" `670 
f N "i2c_init" 1 1104 ""
v L "baud" 1 1104 "int32" `673 
f B "i2c_init" 1 1104 "void(int32 baud)" `672 
f N "i2c_init" 1 1105 ""
v L "stream" 1 1105 "int8" `675 
v L "baud" 1 1105 "int32" `676 
f B "i2c_init" 1 1105 "void(int8 stream,int32 baud)" `674 
f N "i2c_transfer" 1 1106 ""
v L "address" 1 1106 "int8" `678 
v L "wData" 1 1106 "*int8" `679 
v L "wCount" 1 1106 "int8" `680 
f B "i2c_transfer" 1 1106 "int8(int8 address,*int8 wData,int8 wCount)" `677 
f N "i2c_transfer" 1 1107 ""
v L "address" 1 1107 "int8" `682 
v L "wData" 1 1107 "*int8" `683 
v L "wCount" 1 1107 "int8" `684 
v L "rData" 1 1107 "*int8" `685 
v L "rCount" 1 1107 "*int8" `686 
f B "i2c_transfer" 1 1107 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `681 
f N "i2c_transfer" 1 1108 ""
v L "stream" 1 1108 "int8" `688 
v L "address" 1 1108 "int8" `689 
v L "wData" 1 1108 "*int8" `690 
v L "wCount" 1 1108 "int8" `691 
f B "i2c_transfer" 1 1108 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `687 
f N "i2c_transfer" 1 1109 ""
v L "stream" 1 1109 "int8" `693 
v L "address" 1 1109 "int8" `694 
v L "wData" 1 1109 "*int8" `695 
v L "wCount" 1 1109 "int8" `696 
v L "rData" 1 1109 "*int8" `697 
v L "rCount" 1 1109 "*int8" `698 
f B "i2c_transfer" 1 1109 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `692 
f N "i2c_transfer_out" 1 1110 ""
v L "address" 1 1110 "int8" `700 
v L "wData" 1 1110 "*int8" `701 
v L "wCount" 1 1110 "int8" `702 
f B "i2c_transfer_out" 1 1110 "int8(int8 address,*int8 wData,int8 wCount)" `699 
f N "i2c_transfer_out" 1 1111 ""
v L "stream" 1 1111 "int8" `704 
v L "address" 1 1111 "int8" `705 
v L "wData" 1 1111 "*int8" `706 
v L "wCount" 1 1111 "int8" `707 
f B "i2c_transfer_out" 1 1111 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `703 
f N "i2c_transfer_in" 1 1112 ""
v L "address" 1 1112 "int8" `709 
v L "rData" 1 1112 "*int8" `710 
v L "rCount" 1 1112 "int8" `711 
f B "i2c_transfer_in" 1 1112 "int8(int8 address,*int8 rData,int8 rCount)" `708 
f N "i2c_transfer_in" 1 1113 ""
v L "stream" 1 1113 "int8" `713 
v L "address" 1 1113 "int8" `714 
v L "rData" 1 1113 "*int8" `715 
v L "rCount" 1 1113 "int8" `716 
f B "i2c_transfer_in" 1 1113 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `712  "#use spi() Prototypes:"
f N "spi_xfer" 1 1116 ""
f B "spi_xfer" 1 1116 "int8()" `717 
f N "spi_xfer" 1 1117 ""
f G "spi_xfer" 1 1117 "int16(int8 data)" `718 
f N "spi_xfer" 1 1118 ""
f G "spi_xfer" 1 1118 "int32(int8 data)" `718 
f N "spi_xfer" 1 1119 ""
v L "data" 1 1119 "int8" `719 
f B "spi_xfer" 1 1119 "int8(int8 data)" `718 
f N "spi_xfer" 1 1120 ""
v L "data" 1 1120 "int16" `721 
f B "spi_xfer" 1 1120 "int16(int16 data)" `720 
f N "spi_xfer" 1 1121 ""
v L "data" 1 1121 "int32" `723 
f B "spi_xfer" 1 1121 "int32(int32 data)" `722 
f N "spi_xfer" 1 1122 ""
v L "stream" 1 1122 "int8" `725 
v L "data" 1 1122 "int8" `726 
f B "spi_xfer" 1 1122 "int8(int8 stream,int8 data)" `724 
f N "spi_xfer" 1 1123 ""
v L "stream" 1 1123 "int8" `728 
v L "data" 1 1123 "int16" `729 
f B "spi_xfer" 1 1123 "int16(int8 stream,int16 data)" `727 
f N "spi_xfer" 1 1124 ""
v L "stream" 1 1124 "int8" `731 
v L "data" 1 1124 "int32" `732 
f B "spi_xfer" 1 1124 "int32(int8 stream,int32 data)" `730 
f N "spi_xfer" 1 1125 ""
v L "stream" 1 1125 "int8" `734 
v L "data" 1 1125 "int8" `735 
v L "bits" 1 1125 "int8" `736 
f B "spi_xfer" 1 1125 "int8(int8 stream,int8 data,int8 bits)" `733 
f N "spi_xfer" 1 1126 ""
v L "stream" 1 1126 "int8" `738 
v L "data" 1 1126 "int16" `739 
v L "bits" 1 1126 "int8" `740 
f B "spi_xfer" 1 1126 "int16(int8 stream,int16 data,int8 bits)" `737 
f N "spi_xfer" 1 1127 ""
v L "stream" 1 1127 "int8" `742 
v L "data" 1 1127 "int32" `743 
v L "bits" 1 1127 "int8" `744 
f B "spi_xfer" 1 1127 "int32(int8 stream,int32 data,int8 bits)" `741 
f N "spi_init" 1 1128 ""
v L "baud" 1 1128 "int32" `746 
f B "spi_init" 1 1128 "void(int32 baud)" `745 
f N "spi_init" 1 1129 ""
v L "stream" 1 1129 "int8" `748 
v L "baud" 1 1129 "int32" `749 
f B "spi_init" 1 1129 "void(int8 stream,int32 baud)" `747 
f N "spi_speed" 1 1130 ""
v L "baud" 1 1130 "int32" `751 
f B "spi_speed" 1 1130 "void(int32 baud)" `750 
f N "spi_speed" 1 1131 ""
v L "stream" 1 1131 "int8" `753 
v L "baud" 1 1131 "int32" `754 
f B "spi_speed" 1 1131 "void(int8 stream,int32 baud)" `752 
f N "spi_speed" 1 1132 ""
v L "stream" 1 1132 "int8" `756 
v L "baud" 1 1132 "int32" `757 
v L "clock" 1 1132 "int32" `758 
f B "spi_speed" 1 1132 "void(int8 stream,int32 baud,int32 clock)" `755 
f N "spi_prewrite" 1 1133 ""
v L "data" 1 1133 "int8" `760 
f B "spi_prewrite" 1 1133 "void(int8 data)" `759 
f N "spi_prewrite" 1 1134 ""
v L "data" 1 1134 "int16" `762 
f B "spi_prewrite" 1 1134 "void(int16 data)" `761 
f N "spi_prewrite" 1 1135 ""
v L "data" 1 1135 "int32" `764 
f B "spi_prewrite" 1 1135 "void(int32 data)" `763 
f N "spi_prewrite" 1 1136 ""
v L "??65535" 1 1136 "int8" `766 
v L "data" 1 1136 "int8" `767 
f B "spi_prewrite" 1 1136 "void(int8 ,int8 data)" `765 
f N "spi_prewrite" 1 1137 ""
v L "??65535" 1 1137 "int8" `769 
v L "data" 1 1137 "int16" `770 
f B "spi_prewrite" 1 1137 "void(int8 ,int16 data)" `768 
f N "spi_prewrite" 1 1138 ""
v L "??65535" 1 1138 "int8" `772 
v L "data" 1 1138 "int32" `773 
f B "spi_prewrite" 1 1138 "void(int8 ,int32 data)" `771 
f N "spi_xfer_in" 1 1139 ""
f B "spi_xfer_in" 1 1139 "int8()" `774 
f N "spi_xfer_in" 1 1140 ""
f G "spi_xfer_in" 1 1140 "int16(int8 bits)" `775 
f N "spi_xfer_in" 1 1141 ""
f G "spi_xfer_in" 1 1141 "int32(int8 bits)" `775 
f N "spi_xfer_in" 1 1142 ""
v L "bits" 1 1142 "int8" `776 
f B "spi_xfer_in" 1 1142 "int8(int8 bits)" `775 
f N "spi_xfer_in" 1 1143 ""
v L "bits" 1 1143 "int8" `778 
f G "spi_xfer_in" 1 1143 "int16(int8 bits,int8 bits)" `777 
f N "spi_xfer_in" 1 1144 ""
v L "bits" 1 1144 "int8" `778 
f G "spi_xfer_in" 1 1144 "int32(int8 bits,int8 bits)" `777 
f N "spi_xfer_in" 1 1145 ""
v L "stream" 1 1145 "int8" `778 
v L "bits" 1 1145 "int8" `779 
f B "spi_xfer_in" 1 1145 "int8(int8 stream,int8 bits)" `777 
f N "spi_xfer_in" 1 1146 ""
v L "stream" 1 1146 "int8" `778 
v L "bits" 1 1146 "int8" `782 
f G "spi_xfer_in" 1 1146 "int16(int8 stream,int8 bits,int16 count)" `780 
f N "spi_xfer_in" 1 1147 ""
v L "stream" 1 1147 "int8" `778 
v L "bits" 1 1147 "int8" `782 
f G "spi_xfer_in" 1 1147 "int32(int8 stream,int8 bits,int16 count)" `780 
f N "spi_transfer" 1 1148 ""
v L "wData" 1 1148 "*int8" `781 
v L "rData" 1 1148 "*int8" `782 
v L "count" 1 1148 "int16" `783 
f B "spi_transfer" 1 1148 "void(*int8 wData,*int8 rData,int16 count)" `780 
f N "spi_transfer" 1 1149 ""
v L "stream" 1 1149 "int8" `785 
v L "wData" 1 1149 "*int8" `786 
v L "rData" 1 1149 "*int8" `787 
v L "count" 1 1149 "int16" `788 
f B "spi_transfer" 1 1149 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `784 
f N "spi_transfer_write" 1 1150 ""
v L "wData" 1 1150 "*int8" `790 
v L "count" 1 1150 "int16" `791 
f B "spi_transfer_write" 1 1150 "void(*int8 wData,int16 count)" `789 
f N "spi_transfer_write" 1 1151 ""
v L "stream" 1 1151 "int8" `793 
v L "wData" 1 1151 "*int8" `794 
v L "count" 1 1151 "int16" `795 
f B "spi_transfer_write" 1 1151 "void(int8 stream,*int8 wData,int16 count)" `792 
f N "spi_transfer_read" 1 1152 ""
v L "rData" 1 1152 "*int8" `797 
v L "count" 1 1152 "int16" `798 
f B "spi_transfer_read" 1 1152 "void(*int8 rData,int16 count)" `796 
f N "spi_transfer_read" 1 1153 ""
v L "stream" 1 1153 "int8" `800 
v L "rData" 1 1153 "*int8" `801 
v L "count" 1 1153 "int16" `802 
f B "spi_transfer_read" 1 1153 "void(int8 stream,*int8 rData,int16 count)" `799  "#use rtos() Prototypes:"
f N "rtos_run" 1 1156 ""
f B "rtos_run" 1 1156 "void()" `803 
f N "rtos_yield" 1 1157 ""
f B "rtos_yield" 1 1157 "void()" `804 
f N "rtos_enable" 1 1158 ""
v L "task" 1 1158 "int8" `806 
f B "rtos_enable" 1 1158 "void(int8 task)" `805 
f N "rtos_disable" 1 1159 ""
v L "task" 1 1159 "int8" `808 
f B "rtos_disable" 1 1159 "void(int8 task)" `807 
f N "rtos_terminate" 1 1160 ""
f B "rtos_terminate" 1 1160 "void()" `809 
f N "rtos_await" 1 1161 ""
v L "flag" 1 1161 "int8" `811 
f B "rtos_await" 1 1161 "void(int8 flag)" `810 
f N "rtos_wait" 1 1162 ""
v L "sem" 1 1162 "int8" `813 
f B "rtos_wait" 1 1162 "void(int8 sem)" `812 
f N "rtos_signal" 1 1163 ""
v L "sem" 1 1163 "int8" `815 
f B "rtos_signal" 1 1163 "void(int8 sem)" `814 
f N "rtos_msg_send" 1 1164 ""
v L "task" 1 1164 "int8" `817 
v L "msg" 1 1164 "int8" `818 
f B "rtos_msg_send" 1 1164 "void(int8 task,int8 msg)" `816 
f N "rtos_msg_read" 1 1165 ""
f B "rtos_msg_read" 1 1165 "int8()" `819 
f N "rtos_msg_poll" 1 1166 ""
f B "rtos_msg_poll" 1 1166 "int8()" `820 
f N "rtos_overrun" 1 1167 ""
v L "task" 1 1167 "int8" `822 
f B "rtos_overrun" 1 1167 "int8(int8 task)" `821 
f N "rtos_stats" 1 1168 ""
v L "task" 1 1168 "int8" `824 
v L "stat" 1 1168 "*int8" `825 
f B "rtos_stats" 1 1168 "void(int8 task,*int8 stat)" `823  "#use timer() Prototypes:"
f N "get_ticks" 1 1171 ""
f B "get_ticks" 1 1171 "int8()" `826 
f N "get_ticks" 1 1172 ""
f G "get_ticks" 1 1172 "int16(int8 stream)" `827 
f N "get_ticks" 1 1173 ""
f G "get_ticks" 1 1173 "int32(int8 stream)" `827 
f N "get_ticks" 1 1174 ""
v L "stream" 1 1174 "int8" `828 
f B "get_ticks" 1 1174 "int8(int8 stream)" `827 
f N "get_ticks" 1 1175 ""
v L "stream" 1 1175 "int8" `830 
f G "get_ticks" 1 1175 "int16(int8 stream)" `829 
f N "get_ticks" 1 1176 ""
v L "stream" 1 1176 "int8" `830 
f G "get_ticks" 1 1176 "int32(int8 stream)" `829 
f N "set_ticks" 1 1177 ""
v L "value" 1 1177 "int8" `830 
f B "set_ticks" 1 1177 "void(int8 value)" `829 
f N "set_ticks" 1 1178 ""
v L "value" 1 1178 "int16" `832 
f B "set_ticks" 1 1178 "void(int16 value)" `831 
f N "set_ticks" 1 1179 ""
v L "value" 1 1179 "int32" `834 
f B "set_ticks" 1 1179 "void(int32 value)" `833 
f N "set_ticks" 1 1180 ""
v L "stream" 1 1180 "int8" `836 
v L "value" 1 1180 "int8" `837 
f B "set_ticks" 1 1180 "void(int8 stream,int8 value)" `835 
f N "set_ticks" 1 1181 ""
v L "stream" 1 1181 "int8" `839 
v L "value" 1 1181 "int16" `840 
f B "set_ticks" 1 1181 "void(int8 stream,int16 value)" `838 
f N "set_ticks" 1 1182 ""
v L "stream" 1 1182 "int8" `842 
v L "value" 1 1182 "int32" `843 
f B "set_ticks" 1 1182 "void(int8 stream,int32 value)" `841  "#use pwm() Prototypes:"
f N "pwm_on" 1 1185 ""
f B "pwm_on" 1 1185 "void()" `844 
f N "pwm_on" 1 1186 ""
v L "stream" 1 1186 "int8" `846 
f B "pwm_on" 1 1186 "void(int8 stream)" `845 
f N "pwm_off" 1 1187 ""
f B "pwm_off" 1 1187 "void()" `847 
f N "pwm_off" 1 1188 ""
v L "stream" 1 1188 "int8" `849 
f B "pwm_off" 1 1188 "void(int8 stream)" `848 
f N "pwm_set_duty" 1 1189 ""
v L "duty" 1 1189 "int16" `851 
f B "pwm_set_duty" 1 1189 "void(int16 duty)" `850 
f N "pwm_set_duty" 1 1190 ""
v L "stream" 1 1190 "int8" `853 
v L "duty" 1 1190 "int16" `854 
f B "pwm_set_duty" 1 1190 "void(int8 stream,int16 duty)" `852 
f N "pwm_set_duty_percent" 1 1191 ""
v L "percent" 1 1191 "int16" `856 
f B "pwm_set_duty_percent" 1 1191 "void(int16 percent)" `855 
f N "pwm_set_duty_percent" 1 1192 ""
v L "stream" 1 1192 "int8" `858 
v L "percent" 1 1192 "int16" `859 
f B "pwm_set_duty_percent" 1 1192 "void(int8 stream,int16 percent)" `857 
f N "pwm_set_frequency" 1 1193 ""
v L "frequency" 1 1193 "int32" `861 
f B "pwm_set_frequency" 1 1193 "void(int32 frequency)" `860 
f N "pwm_set_frequency" 1 1194 ""
v L "stream" 1 1194 "int8" `863 
v L "frequency" 1 1194 "int32" `864 
f B "pwm_set_frequency" 1 1194 "void(int8 stream,int32 frequency)" `862  "#use capture() Prototypes:"
f N "get_capture_time" 1 1197 ""
f B "get_capture_time" 1 1197 "int16()" `865 
f N "get_capture_time" 1 1198 ""
v L "stream" 1 1198 "int8" `867 
f B "get_capture_time" 1 1198 "int16(int8 stream)" `866 
f N "get_capture_event" 1 1199 ""
f B "get_capture_event" 1 1199 "int8()" `868 
f N "get_capture_event" 1 1200 ""
v L "stream" 1 1200 "int8" `870 
f B "get_capture_event" 1 1200 "int8(int8 stream)" `869  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 1213 ""
v L "address" 1 1213 "int32" `872 
f B "goto_address" 1 1213 "void(int32 address)" `871 
f N "label_address" 1 1214 ""
v L "label" 1 1214 "int32" `874 
f B "label_address" 1 1214 "int32(int32 label)" `873  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 1217 ""
v L "address" 1 1217 "int32" `876 
v L "dataptr" 1 1217 "*int8" `877 
v L "count" 1 1217 "int16" `878 
f B "read_program_memory" 1 1217 "void(int32 address,*int8 dataptr,int16 count)" `875 
f N "read_program_eeprom" 1 1218 ""
v L "address" 1 1218 "int32" `880 
f B "read_program_eeprom" 1 1218 "int16(int32 address)" `879  "Program Memory Write Prototypes:"
f N "write_program_memory" 1 1221 ""
v L "address" 1 1221 "int32" `882 
v L "dataptr" 1 1221 "*int8" `883 
v L "count" 1 1221 "int16" `884 
f B "write_program_memory" 1 1221 "void(int32 address,*int8 dataptr,int16 count)" `881 
f N "write_program_eeprom" 1 1222 ""
v L "address" 1 1222 "int32" `886 
v L "data" 1 1222 "int16" `887 
f B "write_program_eeprom" 1 1222 "void(int32 address,int16 data)" `885  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 1227 "unsigned int16"
f N "read_eeprom" 1 1232 ""
v L "address" 1 1232 "int16" `889 
f B "read_eeprom" 1 1232 "int8(int16 address)" `888 
f N "write_eeprom" 1 1233 ""
v L "address" 1 1233 "int16" `891 
v L "value" 1 1233 "int8" `892 
f B "write_eeprom" 1 1233 "void(int16 address,int8 value)" `890  "#use touchpad() Prototypes:"
f N "touchpad_state" 1 1236 ""
v L "state" 1 1236 "int8" `894 
f B "touchpad_state" 1 1236 "void(int8 state)" `893 
f N "touchpad_getc" 1 1237 ""
f B "touchpad_getc" 1 1237 "int8()" `895 
f N "touchpad_hit" 1 1238 ""
f B "touchpad_hit" 1 1238 "int8()" `896  "INT"
c L "touchpad_hit" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 1244 ""
v L "interrupt" 1 1244 "int32" `898 
f B "enable_interrupts" 1 1244 "void(int32 interrupt)" `897 
f N "disable_interrupts" 1 1245 ""
v L "interrupt" 1 1245 "int32" `900 
f B "disable_interrupts" 1 1245 "void(int32 interrupt)" `899 
f N "clear_interrupt" 1 1246 ""
v L "interrupt" 1 1246 "int32" `902 
f B "clear_interrupt" 1 1246 "void(int32 interrupt)" `901 
f N "interrupt_active" 1 1247 ""
v L "interrupt" 1 1247 "int32" `904 
f B "interrupt_active" 1 1247 "int8(int32 interrupt)" `903 
f N "interrupt_enabled" 1 1248 ""
v L "interrupt" 1 1248 "int32" `906 
f B "interrupt_enabled" 1 1248 "int8(int32 interrupt)" `905 
f N "ext_int_edge" 1 1249 ""
v L "source" 1 1249 "int8" `908 
v L "edge" 1 1249 "int8" `909 
f B "ext_int_edge" 1 1249 "void(int8 source,int8 edge)" `907 
f N "jump_to_isr" 1 1250 ""
v L "address" 1 1250 "int16" `911 
f B "jump_to_isr" 1 1250 "void(int16 address)" `910  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 1252 "0x40"
d G "H_TO_L" 1 1253 "0"
d G "GLOBAL" 1 1255 "0xF2C0"
d G "PERIPH" 1 1256 "0xF240"
d G "INT_RTCC" 1 1257 "0x00F220"
d G "INT_TIMER0" 1 1258 "0x00F220"
d G "INT_TIMER1" 1 1259 "0x009D01"
d G "INT_TIMER2" 1 1260 "0x009D02"
d G "INT_TIMER3" 1 1261 "0x00A002"
d G "INT_EXT_L2H" 1 1262 "0x5000F210"
d G "INT_EXT_H2L" 1 1263 "0x6000F210"
d G "INT_EXT" 1 1264 "0x00F210"
d G "INT_EXT1_L2H" 1 1265 "0x5001F008"
d G "INT_EXT1_H2L" 1 1266 "0x6001F008"
d G "INT_EXT1" 1 1267 "0x00F008"
d G "INT_EXT2_L2H" 1 1268 "0x5002F010"
d G "INT_EXT2_H2L" 1 1269 "0x6002F010"
d G "INT_EXT2" 1 1270 "0x00F010"
d G "INT_RB" 1 1271 "0x00FFF208"
d G "INT_PSP" 1 1272 "0x009D80"
d G "INT_AD" 1 1273 "0x009D40"
d G "INT_RDA" 1 1274 "0x009D20"
d G "INT_TBE" 1 1275 "0x009D10"
d G "INT_SSP" 1 1276 "0x009D08"
d G "INT_BUSCOL" 1 1277 "0x00A008"
d G "INT_RDA2" 1 1278 "0x00A320"
d G "INT_TBE2" 1 1279 "0x00A310"
d G "INT_OSCF" 1 1280 "0x00A080"
d G "INT_HLVD" 1 1281 "0x00A004"
d G "INT_EXT3_L2H" 1 1282 "0x5003F020"
d G "INT_EXT3_H2L" 1 1283 "0x6003F020"
d G "INT_EXT3" 1 1284 "0x00F020"
d G "INT_CCP1" 1 1285 "0x00A302"
d G "INT_CCP2" 1 1286 "0x00A304"
d G "INT_RTC" 1 1287 "0x00A301"
d G "INT_CTMU" 1 1288 "0x00A308"
d G "INT_TMR1G" 1 1289 "0x009D04"
d G "INT_TMR3G" 1 1290 "0x00A001"
d G "INT_BUSCOL2" 1 1291 "0x00A010"
d G "INT_SSP2" 1 1292 "0x00A020"
d G "INT_TMR5G" 1 1293 "0x00A380"
d G "INT_CCP3" 1 1294 "0x00B601"
d G "INT_CCP4" 1 1295 "0x00B602"
d G "INT_CCP5" 1 1296 "0x00B604"
d G "INT_CCP6" 1 1297 "0x00B608"
d G "INT_CCP7" 1 1298 "0x00B610"
d G "INT_CCP8" 1 1299 "0x00B620"
d G "INT_CCP9" 1 1300 "0x00B640"
d G "INT_CCP10" 1 1301 "0x00B680"
d G "INT_TIMER4" 1 1302 "0x00B901"
d G "INT_TIMER5" 1 1303 "0x00B902"
d G "INT_TIMER6" 1 1304 "0x00B904"
d G "INT_TIMER7" 1 1305 "0x00B908"
d G "INT_TIMER8" 1 1306 "0x00B910"
d G "INT_TIMER10" 1 1307 "0x00B920"
d G "INT_TIMER12" 1 1308 "0x00B940"
d G "INT_TMR7G" 1 1309 "0x00B980"
d G "INT_COMP1" 1 1310 "0x006001"
d G "INT_COMP2" 1 1311 "0x006002"
d G "INT_COMP3" 1 1312 "0x006004"
d G "INT_EEPROM" 1 1313 "0x006010"
C L "jump_to_isr" 0 12 2 "FUNCTION"
D G "MATH_H" 2 30 ""
D G "PI" 2 35 "3.1415926535897932"
D G "SQRT2" 2 38 "1.4142135623730950"
C L "jump_to_isr" 2 2 3 "FUNCTION"
F N "CEIL_FLOOR" 2 45 ""
V L "x" 2 45 "float" `933 
V L "n" 2 45 "int8" `934 
F G "CEIL_FLOOR" 2 46 "float(float x,int8 n)" `932 
V L "y" 2 47 "float" `935 
V L "res" 2 47 "float" `936 
V L "l" 2 48 "int16" `937 
V L "s" 2 49 "int1" `938 
C L "floor" 2 2 5 "FUNCTION"
F N "floor" 2 207 ""
V L "x" 2 207 "float" `953 
F G "floor" 2 208 "float(float x)" `952 
C L "ceil" 2 2 5 "FUNCTION"
F N "ceil" 2 233 ""
V L "x" 2 233 "float" `955 
F G "ceil" 2 234 "float(float x)" `954 
D G "fabs" 2 259 "abs"
C L "fmod" 2 2 6 "FUNCTION"
F N "fmod" 2 271 ""
V L "x" 2 271 "float" `957 
V L "y" 2 271 "float" `958 
F G "fmod" 2 272 "float(float x,float y)" `956 
V L "i" 2 273 "float" `959 
D G "LN2" 2 334 "0.6931471805599453"
D G "LN2_INV" 2 335 "1.4426950408889634073"
V G "pe" 2 337 "[6]" `964 
F N "exp" 2 341 ""
V L "x" 2 341 "float" `967 
F G "exp" 2 342 "float(float x)" `966 
V L "y" 2 343 "float" `968 
V L "res" 2 343 "float" `969 
V L "r" 2 343 "float" `970 
V L "n" 2 347 "sint8" `971 
V L "s" 2 348 "int1" `972 
C L "exp" 2 2 1 "FUNCTION"
V G "pl" 2 525 "[4]" `976 
V G "ql" 2 526 "[4]" `979 
C L "log" 2 2 3 "FUNCTION"
F N "log" 2 534 ""
V L "x" 2 534 "float" `982 
F G "log" 2 535 "float(float x)" `981 
V L "y" 2 536 "float" `983 
V L "res" 2 536 "float" `984 
V L "r" 2 536 "float" `985 
V L "y2" 2 536 "float" `986 
V L "n" 2 540 "sint8" `987 
C L "log" 2 2 1 "FUNCTION"
D G "LN10" 2 758 "2.3025850929940456"
D G "LN10_INV" 2 759 "0.4342944819032518276"
C L "log10" 2 2 3 "FUNCTION"
F N "log10" 2 767 ""
V L "x" 2 767 "float" `989 
F G "log10" 2 768 "float(float x)" `988 
V L "r" 2 769 "float" `990 
C L "modf" 2 2 8 "FUNCTION"
F N "modf" 2 808 ""
V L "value" 2 808 "float" `992 
V L "iptr" 2 808 "*float" `993 
F G "modf" 2 809 "float(float value,*float iptr)" `991 
C L "pwr" 2 2 6 "FUNCTION"
F N "pwr" 2 836 ""
V L "x" 2 836 "float" `995 
V L "y" 2 836 "float" `996 
F G "pwr" 2 837 "float(float x,float y)" `994 
C L "pow" 2 2 7 "FUNCTION"
F N "pow" 2 899 ""
V L "x" 2 899 "float" `998 
V L "y" 2 899 "float" `999 
F G "pow" 2 900 "float(float x,float y)" `997 
C L "sqrt" 2 2 5 "FUNCTION"
F N "sqrt" 2 960 ""
V L "x" 2 960 "float" `1001 
F G "sqrt" 2 961 "float(float x)" `1000 
V L "y" 2 962 "float" `1002 
V L "res" 2 962 "float" `1003 
V L "p" 2 966 "*int8" `1004 
D G "PI_DIV_BY_TWO_INV" 2 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 2 1159 "1.5707963267948966"
D G "TWOBYPI" 2 1163 "0.6366197723675813"
C L "cos" 2 2 3 "FUNCTION"
F N "cos" 2 1171 ""
V L "x" 2 1171 "float" `1006 
F G "cos" 2 1172 "float(float x)" `1005 
V L "y" 2 1173 "float" `1007 
V L "t" 2 1173 "float" `1008 
V L "t2" 2 1173 "float" `1009 
V L "quad" 2 1174 "int8" `1010 
V L "i" 2 1174 "int8" `1011 
V L "frac" 2 1175 "float" `1012 
V L "p" 2 1176 "float[5]" `1013  "by the series definition for cosine"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 2 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "cos" 2 2 1 "FUNCTION"
C L "sin" 2 2 5 "FUNCTION"
F N "sin" 2 1310 ""
V L "x" 2 1310 "float" `1015 
F G "sin" 2 1311 "float(float x)" `1014 
C L "tan" 2 2 5 "FUNCTION"
F N "tan" 2 1336 ""
V L "x" 2 1336 "float" `1017 
F G "tan" 2 1337 "float(float x)" `1016 
V L "c" 2 1338 "float" `1018 
V L "s" 2 1338 "float" `1019 
V G "pas" 2 1376 "[3]" `1021 
V G "qas" 2 1377 "[3]" `1024 
F N "ASIN_COS" 2 1379 ""
V L "x" 2 1379 "float" `1027 
V L "n" 2 1379 "int8" `1028 
F G "ASIN_COS" 2 1380 "float(float x,int8 n)" `1026 
V L "y" 2 1381 "float" `1029 
V L "res" 2 1381 "float" `1030 
V L "r" 2 1381 "float" `1031 
V L "y2" 2 1381 "float" `1032 
V L "s" 2 1382 "int1" `1033 
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "ASIN_COS" 2 2 1 "FUNCTION"
C L "asin" 2 2 5 "FUNCTION"
F N "asin" 2 1537 ""
V L "x" 2 1537 "float" `1035 
F G "asin" 2 1538 "float(float x)" `1034 
V L "r" 2 1539 "float" `1036 
C L "acos" 2 2 5 "FUNCTION"
F N "acos" 2 1571 ""
V L "x" 2 1571 "float" `1038 
F G "acos" 2 1572 "float(float x)" `1037 
V L "r" 2 1573 "float" `1039 
V G "pat" 2 1599 "[4]" `1041 
V G "qat" 2 1600 "[4]" `1044 
C L "atan" 2 2 3 "FUNCTION"
F N "atan" 2 1608 ""
V L "x" 2 1608 "float" `1047 
F G "atan" 2 1609 "float(float x)" `1046 
V L "y" 2 1610 "float" `1048 
V L "res" 2 1610 "float" `1049 
V L "r" 2 1610 "float" `1050 
V L "s" 2 1611 "int1" `1051 
V L "flag" 2 1611 "int1" `1052 
C L "atan" 2 2 1 "FUNCTION"
C L "atan2" 2 2 7 "FUNCTION"
F N "atan2" 2 1751 ""
V L "y" 2 1751 "float" `1054 
V L "x" 2 1751 "float" `1055 
F G "atan2" 2 1752 "float(float y,float x)" `1053 
V L "z" 2 1753 "float" `1056 
V L "sign" 2 1754 "int1" `1057 
V L "quad" 2 1755 "int8" `1058 
C L "atan2" 2 2 1 "FUNCTION"
C L "atan2" 2 2 1 "FUNCTION"
C L "cosh" 2 2 7 "FUNCTION"
F N "cosh" 2 1973 ""
V L "x" 2 1973 "float" `1061 
F G "cosh" 2 1974 "float(float x)" `1060 
C L "sinh" 2 2 6 "FUNCTION"
F N "sinh" 2 2000 ""
V L "x" 2 2000 "float" `1063 
F G "sinh" 2 2001 "float(float x)" `1062 
C L "tanh" 2 2 6 "FUNCTION"
F N "tanh" 2 2030 ""
V L "x" 2 2030 "float" `1065 
F G "tanh" 2 2031 "float(float x)" `1064 
D G "LOG2" 2 2060 ".30102999566398119521"
D G "LOG2_INV" 2 2061 "3.32192809488736234787"
F N "frexp" 2 2062 ""
V L "x" 2 2062 "float" `1067 
V L "exp" 2 2062 "*sint8" `1068 
F G "frexp" 2 2063 "float(float x,*sint8 exp)" `1066 
V L "res" 2 2064 "float" `1069 
V L "sign" 2 2065 "int1" `1070 
C L "ldexp" 2 2 6 "FUNCTION"
F N "ldexp" 2 2207 ""
V L "value" 2 2207 "float" `1072 
V L "exp" 2 2207 "sint8" `1073 
F G "ldexp" 2 2208 "float(float value,sint8 exp)" `1071 
D G "_STDLIB" 3 13 ""
D G "RAND_MAX" 3 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 26 "1"
T G "div_t" 3 34 "{sint8 quot,sint8 rem}" `1077 
T G "ldiv_t" 3 39 "{sint16 quot,sint16 rem}" `1081  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "unsigned char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 3 44 2 "FUNCTION"
C L "atoi" 3 47 1 "*"
C L "atoi" 3 47 1 "*"
F N "atoi" 3 51 ""
V L "s" 3 51 "*int8" `1083 
f G "atoi" 3 51 "sint8(*int8 s)" `1082  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 3 59 ""
V L "s" 3 59 "*int8" `1085 
f G "atoi32" 3 59 "sint32(*int8 s)" `1084  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 47 2 "FUNCTION"
F N "itoa" 3 80 ""
V L "num" 3 80 "sint32" `1087 
V L "base" 3 80 "int8" `1088 
V L "s" 3 80 "*int8" `1089 
f G "itoa" 3 80 "*int8(sint32 num,int8 base,*int8 s)" `1086  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 82 1 "*"
C L "itoa" 3 82 1 "*"
F N "atol" 3 86 ""
V L "s" 3 86 "*int8" `1091 
f G "atol" 3 86 "sint16(*int8 s)" `1090  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
F N "strtol" 3 94 ""
V L "s" 3 94 "*int8" `1093 
V L "endptr" 3 94 "*int8" `1094 
V L "base" 3 94 "sint8" `1095 
f G "strtol" 3 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `1092  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
F N "strtoul" 3 102 ""
V L "s" 3 102 "*int8" `1097 
V L "endptr" 3 102 "*int8" `1098 
V L "base" 3 102 "sint8" `1099 
f G "strtoul" 3 102 "int16(*int8 s,*int8 endptr,sint8 base)" `1096  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 96 2 "FUNCTION"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
F N "strtof" 3 111 ""
V L "s" 3 111 "*int8" `1101 
V L "endptr" 3 111 "??0 *" `1102 
f G "strtof" 3 111 "float(*int8 s,??0 * endptr)" `1100  "provided for compatibility"
D G "strtof48" 3 117 "(s,e) strtof(s, e)"
D G "strtod" 3 118 "(s,e) strtof(s, e)"
C L "strtof" 3 104 1 "FUNCTION"
C L "strtof" 3 121 1 "*"
D G "atof" 3 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 3 121 1 "FUNCTION"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
F N "atoe" 3 150 ""
V L "s" 3 150 "*int8" `1105 
f G "atoe" 3 150 "float(*int8 s)" `1104  "Pseudo-random sequence generation functions"
C L "atoe" 3 144 1 "FUNCTION"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
F N "rand" 3 170 ""
f G "rand" 3 170 "int16()" `1106  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
F N "srand" 3 192 ""
V L "seed" 3 192 "int32" `1108 
f G "srand" 3 192 "void(int32 seed)" `1107  "Memory management functions"
C L "srand" 3 172 3 "FUNCTION"
F N "system" 3 206 ""
V L "string" 3 206 "*int8" `1110 
f G "system" 3 206 "sint8(*int8 string)" `1109  "Searching and sorting utilities"
C L "system" 3 172 1 "FUNCTION"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 4 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
D G "labs" 3 250 "abs"
F N "div" 3 252 ""
V L "numer" 3 252 "sint8" `1112 
V L "denom" 3 252 "sint8" `1113 
f G "div" 3 252 "div_t(sint8 numer,sint8 denom)" `1111 
F N "ldiv" 3 253 ""
V L "numer" 3 253 "sint16" `1115 
V L "denom" 3 253 "sint16" `1116 
f G "ldiv" 3 253 "ldiv_t(sint16 numer,sint16 denom)" `1114  "Multibyte character functions"
C L "ldiv" 3 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `1118 
V L "s2" 5 34 "*void" `1119 
V L "n" 5 34 "int16" `1120 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int16 n)" `1117 
V L "sc1" 5 36 "*int8" `1121 
V L "sc2" 5 37 "*int8" `1122 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `1124 
V L "s2" 5 61 "*int8" `1125 
V L "n" 5 61 "int16" `1126 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `1123 
V L "s" 5 63 "*int8" `1127 
C L "strcat" 5 19 3 "FUNCTION"
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `1129 
V L "s2" 5 78 "*int8" `1130 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `1128 
V L "s" 5 80 "*int8" `1131 
C L "strncat" 5 19 2 "FUNCTION"
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `1133 
V L "s2" 5 96 "*int8" `1134 
V L "n" 5 96 "int16" `1135 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `1132 
V L "s" 5 98 "*int8" `1136 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `1138 
V L "s2" 5 120 "*void" `1139 
V L "n" 5 120 "int16" `1140 
F G "memcmp" 5 121 "sint8(*void s1,*void s2,int16 n)" `1137 
V L "su1" 5 122 "*int8" `1141 
V L "su2" 5 122 "*int8" `1142 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `1144 
V L "s2" 5 134 "*int8" `1145 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `1143 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `1147 
V L "s2" 5 144 "*int8" `1148 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `1146 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `1150 
V L "s2" 5 157 "*int8" `1151 
V L "n" 5 157 "int16" `1152 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `1149 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `1154 
V L "s2" 5 170 "*int8" `1155 
V L "n" 5 170 "int16" `1156 
F G "strxfrm" 5 171 "int16(*int8 s1,*int8 s2,int16 n)" `1153 
V L "c" 5 172 "int8" `1157 
V L "n1" 5 173 "int8" `1158 
C L "strxfrm" 5 19 1 "FUNCTION"
C L "memchr" 5 19 3 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `1160 
V L "c" 5 201 "int8" `1161 
V L "n" 5 201 "int16" `1162 
F G "memchr" 5 202 "*int8(*void s,int8 c,int16 n)" `1159 
V L "uc" 5 203 "int8" `1163 
V L "su" 5 204 "*int8" `1164 
C L "strchr" 5 19 2 "FUNCTION"
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `1166 
V L "c" 5 215 "int8" `1167 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `1165 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `1169 
V L "s2" 5 227 "*int8" `1170 
F G "strcspn" 5 228 "int16(*int8 s1,*int8 s2)" `1168 
V L "sc1" 5 229 "*int8" `1171 
V L "sc2" 5 229 "*int8" `1172 
C L "strpbrk" 5 19 4 "FUNCTION"
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `1174 
V L "s2" 5 242 "*int8" `1175 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `1173 
V L "sc1" 5 244 "*int8" `1176 
V L "sc2" 5 244 "*int8" `1177 
C L "strrchr" 5 19 2 "FUNCTION"
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `1179 
V L "c" 5 257 "int8" `1180 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `1178 
V L "p" 5 259 "*int8" `1181 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `1183 
V L "s2" 5 272 "*int8" `1184 
F G "strspn" 5 273 "int16(*int8 s1,*int8 s2)" `1182 
V L "sc1" 5 274 "*int8" `1185 
V L "sc2" 5 274 "*int8" `1186 
C L "strstr" 5 19 6 "FUNCTION"
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `1188 
V L "s2" 5 291 "*int8" `1189 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `1187 
V L "s" 5 293 "*int8" `1190 
V L "t" 5 293 "*int8" `1191 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `1193 
F G "strlen" 5 319 "int16(*int8 s)" `1192 
V L "sc" 5 320 "*int8" `1194 
C L "strtok" 5 19 13 "FUNCTION"
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `1196 
V L "s2" 5 341 "*int8" `1197 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `1195 
V L "beg" 5 343 "*int8" `1198 
V L "end" 5 343 "*int8" `1199 
V L "save" 5 344 "*int8" `1200 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `1202 
V L "s2" 5 392 "*int8" `1203 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `1201 
C L "strlwr" 5 19 3 "FUNCTION"
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `1207 
F G "strlwr" 5 407 "*int8(*int8 s)" `1206 
V L "p" 5 408 "*int8" `1208 
C L "strupr" 5 19 3 "FUNCTION"
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `1210 
F G "strupr" 5 421 "*int8(*int8 s)" `1209 
V L "p" 5 422 "*int8" `1211 
F N "div" 3 275 ""
V L "numer" 3 275 "sint8" `1112 
V L "denom" 3 275 "sint8" `1214 
F G "div" 3 276 "div_t(sint8 numer,sint8 denom)" `1111 
V L "val" 3 277 "div_t" `1212 
F N "ldiv" 3 283 ""
V L "numer" 3 283 "sint16" `1115 
V L "denom" 3 283 "sint16" `1221 
F G "ldiv" 3 284 "ldiv_t(sint16 numer,sint16 denom)" `1114 
V L "val" 3 285 "ldiv_t" `1219 
F N "atoe" 3 362 ""
V L "s" 3 362 "*int8" `1227 
F G "atoe" 3 363 "float(*int8 s)" `1104 
V L "pow10" 3 364 "float" `1226 
V L "result" 3 365 "float" `1227 
V L "sign" 3 366 "int8" `1228 
V L "expsign" 3 367 "int8" `1229 
V L "c" 3 368 "int8" `1230 
V L "ptr" 3 369 "int8" `1231 
V L "i" 3 370 "int8" `1232 
V L "exp" 3 371 "float" `1233 
V L "expcnt" 3 372 "int8" `1234 
C L "atoe" 3 398 1 "FUNCTION"
F N "atoi" 3 430 ""
V L "s" 3 430 "*int8" `1236 
F G "atoi" 3 431 "sint8(*int8 s)" `1082 
V L "result" 3 432 "sint8" `1235 
V L "sign" 3 433 "int8" `1236 
V L "base" 3 433 "int8" `1237 
V L "index" 3 433 "int8" `1238 
V L "c" 3 434 "int8" `1239 
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
F N "atol" 3 499 ""
V L "s" 3 499 "*int8" `1241 
F G "atol" 3 500 "sint16(*int8 s)" `1090 
V L "result" 3 501 "sint16" `1240 
V L "sign" 3 502 "int8" `1241 
V L "base" 3 502 "int8" `1242 
V L "index" 3 502 "int8" `1243 
V L "c" 3 503 "int8" `1244 
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "mult_with10" 3 398 1 "FUNCTION"
F N "mult_with10" 3 566 ""
V L "num" 3 566 "int32" `1246 
F G "mult_with10" 3 567 "sint32(int32 num)" `1245 
F N "atoi32" 3 572 ""
V L "s" 3 572 "*int8" `1248 
F G "atoi32" 3 573 "sint32(*int8 s)" `1084 
V L "result" 3 574 "sint32" `1247 
V L "sign" 3 575 "int8" `1248 
V L "base" 3 575 "int8" `1249 
V L "index" 3 575 "int8" `1250 
V L "c" 3 576 "int8" `1251 
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
F N "itoa" 3 771 ""
V L "num" 3 771 "sint32" `1087 
V L "base" 3 771 "int8" `1088 
V L "s" 3 771 "*int8" `1255 
F G "itoa" 3 772 "*int8(sint32 num,int8 base,*int8 s)" `1086 
V L "temp" 3 773 "int32" `1252 
V L "i" 3 774 "int8" `1253 
V L "sign" 3 774 "int8" `1254 
V L "cnt" 3 774 "int8" `1255 
V L "c" 3 775 "int8" `1256 
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
F N "strtof" 3 886 ""
V L "s" 3 886 "*int8" `1101 
V L "endptr" 3 886 "??0 *" `1265 
F G "strtof" 3 887 "float(*int8 s,??0 * endptr)" `1100 
V L "pow10" 3 888 "float" `1263 
V L "result" 3 889 "float" `1264 
V L "skip" 3 890 "int1" `1265 
V L "sign" 3 890 "int1" `1266 
V L "point" 3 890 "int1" `1267 
V L "c" 3 891 "int8" `1268 
V L "ptr" 3 892 "int8" `1269 
F N "strtoul" 3 1104 ""
V L "s" 3 1104 "*int8" `1097 
V L "endptr" 3 1104 "*int8" `1098 
V L "base" 3 1104 "sint8" `1274 
F G "strtoul" 3 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `1096 
V L "sc" 3 1106 "*int8" `1271 
V L "s1" 3 1106 "*int8" `1272 
V L "sd" 3 1106 "*int8" `1273 
V L "x" 3 1107 "int16" `1274 
V L "sign" 3 1108 "int8" `1275 
V L "digits" 3 1109 "int8[1]" `1276 
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
F N "strtol" 3 1166 ""
V L "s" 3 1166 "*int8" `1093 
V L "endptr" 3 1166 "*int8" `1094 
V L "base" 3 1166 "sint8" `1281 
F G "strtol" 3 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `1092 
V L "sc" 3 1168 "*int8" `1278 
V L "s1" 3 1168 "*int8" `1279 
V L "sd" 3 1168 "*int8" `1280 
V L "x" 3 1169 "sint16" `1281 
V L "sign" 3 1170 "int8" `1282 
V L "digits" 3 1171 "int8[1]" `1283 
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
F N "system" 3 1229 ""
V L "string" 3 1229 "*int8" `1286 
F G "system" 3 1230 "sint8(*int8 string)" `1109 
F N "mblen" 3 1234 ""
V L "s" 3 1234 "*int8" `1286 
V L "n" 3 1234 "int16" `1287 
F G "mblen" 3 1235 "int16(*int8 s,int16 n)" `1285 
F N "mbtowc" 3 1239 ""
V L "pwc" 3 1239 "*int8" `1289 
V L "s" 3 1239 "*int8" `1290 
V L "n" 3 1239 "int16" `1291 
F G "mbtowc" 3 1240 "int8(*int8 pwc,*int8 s,int16 n)" `1288 
F N "wctomb" 3 1245 ""
V L "s" 3 1245 "*int8" `1293 
V L "wchar" 3 1245 "int8" `1294 
F G "wctomb" 3 1246 "int8(*int8 s,int8 wchar)" `1292 
F N "mbstowcs" 3 1251 ""
V L "pwcs" 3 1251 "*int8" `1296 
V L "s" 3 1251 "*int8" `1297 
V L "n" 3 1251 "int16" `1298 
F G "mbstowcs" 3 1252 "int16(*int8 pwcs,*int8 s,int16 n)" `1295 
F N "wcstombs" 3 1257 ""
V L "s" 3 1257 "*int8" `1300 
V L "pwcs" 3 1257 "*int8" `1301 
V L "n" 3 1257 "int16" `1302 
F G "wcstombs" 3 1258 "int16(*int8 s,*int8 pwcs,int16 n)" `1299 
V G "_Randseed" 3 1267 "int32" `1303 
F N "rand" 3 1269 ""
F G "rand" 3 1270 "int16()" `1106 
F N "srand" 3 1275 ""
V L "seed" 3 1275 "int32" `1308 
F G "srand" 3 1276 "void(int32 seed)" `1107 
F N "*_Cmpfun" 3 1285 ""
V L "p1" 3 1285 "*int8" `1308 
V L "p2" 3 1285 "*int8" `1309 
T G "*_Cmpfun" 3 1285 "sint8(*int8 p1,*int8 p2)" `1307 
F N "qsort" 3 1292 ""
V L "qdata" 3 1292 "*int8" `1312 
V L "qitems" 3 1292 "int8" `1313 
V L "qsize" 3 1292 "int8" `1314 
V L "cmp" 3 1292 "_Cmpfun" `1315 
F G "qsort" 3 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `1311 
V L "m" 3 1293 "int8" `1316 
V L "j" 3 1293 "int8" `1317 
V L "i" 3 1293 "int8" `1318 
V L "l" 3 1293 "int8" `1319 
V L "done" 3 1294 "int1" `1320 
V L "t" 3 1295 "int8[16]" `1321 
F N "bsearch" 3 1320 ""
V L "key" 3 1320 "*int8" `1324 
V L "base" 3 1320 "*int8" `1325 
V L "num" 3 1320 "int16" `1326 
V L "width" 3 1320 "int16" `1327 
V L "cmp" 3 1320 "_Cmpfun" `1328 
F G "bsearch" 3 1321 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `1323 
V L "p" 3 1322 "*int8" `1329 
V L "q" 3 1322 "*int8" `1330 
V L "n" 3 1323 "int16" `1331 
V L "pivot" 3 1324 "int16" `1332 
V L "val" 3 1325 "sint8" `1333 
C L "bsearch" 3 398 1 "FUNCTION"
D G "_STDINT" 7 19 ""
T G "int8_t" 7 23 "sint8" `1337 
T G "uint8_t" 7 24 "int8" `1338 
T G "int16_t" 7 25 "sint16" `1339 
T G "uint16_t" 7 26 "int16" `1340 
T G "int32_t" 7 27 "sint32" `1341 
T G "uint32_t" 7 28 "int32" `1342 
D G "INT8_MAX" 7 37 " (127)"
D G "INT8_MIN" 7 38 " (-128)"
D G "UINT8_MAX" 7 39 " (255)"
D G "INT16_MAX" 7 41 " (32767)"
D G "INT16_MIN" 7 42 " (-32768)"
D G "UINT16_MAX" 7 43 " (65535)"
D G "INT32_MAX" 7 45 " (2147483647)"
D G "INT32_MIN" 7 46 " (-2147483648)"
D G "UINT32_MAX" 7 47 " (4294967295)"
T G "int_least8_t" 7 61 "sint8" `1343 
T G "uint_least8_t" 7 62 "int8" `1344 
T G "int_least16_t" 7 63 "sint16" `1345 
T G "uint_least16_t" 7 64 "int16" `1346 
T G "int_least32_t" 7 65 "sint32" `1347 
T G "uint_least32_t" 7 66 "int32" `1348 
D G "INT_LEAST8_MAX" 7 75 " (127)"
D G "INT_LEAST8_MIN" 7 76 " (-128)"
D G "UINT_LEAST8_MAX" 7 77 " (255)"
D G "INT_LEAST16_MAX" 7 79 " (32767)"
D G "INT_LEAST16_MIN" 7 80 " (-32768)"
D G "UINT_LEAST16_MAX" 7 81 " (65535)"
D G "INT_LEAST32_MAX" 7 83 " (2147483647)"
D G "INT_LEAST32_MIN" 7 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 7 85 " (4294967295)"
T G "int_fast8_t" 7 112 "sint8" `1349 
T G "uint_fast8_t" 7 113 "int8" `1350 
D G "INT_FAST8_MAX" 7 114 " (127)"
D G "INT_FAST8_MIN" 7 115 " (-128)"
D G "UINT_FAST8_MAX" 7 116 " (255)"
T G "int_fast16_t" 7 117 "sint16" `1351 
T G "uint_fast16_t" 7 118 "int16" `1352 
T G "int_fast32_t" 7 121 "sint32" `1353 
T G "uint_fast32_t" 7 122 "int32" `1354 
D G "INT_FAST16_MAX" 7 124 " (32767)"
D G "INT_FAST16_MIN" 7 125 " (-32768)"
D G "UINT_FAST16_MAX" 7 126 " (65535)"
D G "INT_FAST32_MAX" 7 128 " (2147483647)"
D G "INT_FAST32_MIN" 7 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 7 130 " (4294967295)"
T G "uintptr_t" 7 148 "int16" `1355 
T G "intptr_t" 7 149 "sint16" `1356 
D G "INT8_C" 7 152 "(val) ((int8_t)val)"
D G "UINT8_C" 7 153 "(val) ((uint8_t)val)"
D G "INT16_C" 7 154 "(val) ((int16_t)val)"
D G "UINT16_C" 7 155 "(val) ((uint16_t)val)"
D G "INT32_C" 7 156 "(val) ((int32_t)val)"
D G "UINT32_C" 7 157 "(val) ((uint32_t)val)"
D G "BUFFER_SIZE" 8 1 "255"
V G "TOKEN" 8 6 "int8[10]" `1357 
V G "INTERRUPTUSB_Rxd" 8 12 "int8[20]" `1358 
V G "InterruptUSB_Flag" 8 13 "int1" `1359 
V G "InterruptUSB_Counter" 8 14 "int8" `1360 
V G "InterruptGSM_Rxd" 8 17 "int8[255]" `1361 
V G "InterruptGSM_Flag" 8 18 "int1" `1362 
V G "InterruptGSM_Counter" 8 19 "int8" `1363 
V G "READ_CNTR" 8 20 "int8" `1364 
V G "NETWORK" 8 23 "int8" `1365 
V G "SERVERNUMBER" 8 24 "int8[15]" `1366 
V G "MYNUMBER1" 8 25 "int8[15]" `1367 
V G "MYNUMBER2" 8 26 "int8[15]" `1368 
V G "SMS_RCV" 8 27 "int8[255]" `1369 
V G "EXT_FLAG" 8 29 "int1" `1370 
V G "GSM_RESPONSE" 8 30 "int8[255]" `1371 
V G "DESIRED_RESPONSE" 8 31 "int8[17]" `1372 
V G "SEC" 8 41 "int8" `1373 
V G "MIN" 8 42 "int8" `1374 
V G "HOUR" 8 43 "int8" `1375 
V G "DAY" 8 44 "int8" `1376 
V G "MONTH" 8 45 "int8" `1377 
V G "YEAR" 8 46 "int8" `1378 
V G "YEAR_PREV" 8 47 "int8" `1379 
V G "strDateTime" 8 51 "int8[20]" `1380 
V G "biralBT" 8 52 "int8[20]" `1381 
V G "BTDLaLo" 8 53 "int8[150]" `1382 
V G "distDir" 8 54 "int8[10]" `1383 
V G "flashCount" 8 56 "int8[10]" `1384 
V G "strBTD_con" 8 57 "int8[10]" `1385 
V G "strBTD_info" 8 58 "int8[20]" `1386 
V G "btdCode" 8 59 "int8[20]" `1387 
V G "powerGSMready" 8 67 "int8" `1388 
V G "SENDING_TIME" 8 69 "int8" `1389 
V G "SAMPLINGFLAG" 8 70 "int1" `1390 
V G "CHECKMINUTE" 8 71 "int1" `1391 
V G "HOUROLD" 8 72 "int8" `1392 
V G "RESETCPU" 8 73 "int1" `1393 
V G "TESTFLAG" 8 75 "int1" `1394 
V G "SYNCFLAG" 8 76 "int1" `1395 
V G "RESETFLAG" 8 77 "int1" `1396 
D G "TX2_RS485" 9 3 "PIN_E4"
D G "RX2_RS485" 9 4 "PIN_E7"
D G "EN_DE_RS485" 9 5 "PIN_E5"
D G "EN_RE_RS485" 9 6 "PIN_E6"
D G "EN_UART" 9 9 "PIN_D1"
D G "EN_I2C" 9 12 "PIN_D4"
D G "SDA_I2C" 9 13 "PIN_D5"
D G "SCL_I2C" 9 14 "PIN_D6"
D G "ENBA" 9 17 "PIN_J2"
D G "ENBB" 9 18 "PIN_J3"
D G "RING_OUT" 9 21 "PIN_B1"
D G "RTS" 9 22 "PIN_A6"
D G "pin_CTS" 9 23 "PIN_A7"
D G "IGT" 9 24 "PIN_C2"
D G "RX_INT" 9 27 "PIN_C6"
D G "TX_INT" 9 28 "PIN_C5"
D G "RX_USB" 9 30 "PIN_G2"
D G "TX_USB" 9 31 "PIN_G1"
D G "TX_B" 9 34 "PIN_G4"
D G "RX_B" 9 35 "PIN_G3"
D G "pin_OUT1" 9 38 "PIN_A3"
D G "OUT2" 9 39 "PIN_A2"
D G "OUT3" 9 40 "PIN_A1"
D G "INTRUP4" 9 43 "PIN_D7"
D G "INTRUP1" 9 44 "PIN_B0"
D G "INTRUP2" 9 45 "PIN_B2"
D G "INTRUP3" 9 46 "PIN_B3"
D G "SDO1" 9 49 "PIN_C5"
D G "SDA1" 9 50 "PIN_C4"
D G "SCK1" 9 51 "PIN_C3"
D G "EN1" 9 52 "PIN_F4"
D G "CS1" 9 53 "PIN_F5"
D G "CS" 9 59 "PIN_E0"
D G "pin_USB_STAT" 9 62 "PIN_G0"
D G "LED_STAT_A" 9 65 "PIN_E1"
D G "LED_STAT_B" 9 66 "PIN_H3"
D G "SHT_DATA_PIN" 9 69 "PIN_H2"
D G "SHT_CLK_PIN" 9 70 "PIN_B4"
D G "MCLR" 9 74 "PIN_G5"
D G "VBAT_ADC" 9 77 "PIN_F7" "channel 5 3.3V MONITORING"
D G "IBOOST_ADC" 9 78 "PIN_H4" "channel 12 BOOST MONITORING"
D G "VBOOST_ADC" 9 79 "PIN_H5" "channel 13 BOOST MONITORING"
D G "IBOOST2_ADC" 9 80 "PIN_H7" "channel 15 BOOST MONITORING"
D G "VBOOST2_ADC" 9 81 "PIN_H6" "channel 14 BOOST MONITORING"
D G "VEXT1_ADC" 9 82 "PIN_F3" "channel 8 EXTERNAL ADC1"
D G "VEXT2_ADC" 9 83 "PIN_F2" "channel 7 EXTERNAL ADC2"
D G "INA_ADC" 9 84 "PIN_A5" "channel 4 INPUT VOLTAGE MONITORING 1"
D G "INB_ADC" 9 85 "PIN_A0" "channel 0 INPUT VOLTAGE MONITORING 2"
D G "channel_VBAT_ADC" 9 87 "5" "channel 5 3.3V MONITORING"
D G "channel_IBOOST_ADC" 9 88 "12" "channel 12 BOOST MONITORING"
D G "channel_VBOOST_ADC" 9 89 "13" "channel 13 BOOST MONITORING"
D G "channel_IBOOST2_ADC" 9 90 "15" "channel 15 BOOST MONITORING"
D G "channel_VBOOST2_ADC" 9 91 "14" "channel 14 BOOST MONITORING"
D G "channel_VEXT1_ADC" 9 92 "8" "channel 8 EXTERNAL ADC1"
D G "channel_VEXT2_ADC" 9 93 "7" "channel 7 EXTERNAL ADC2"
D G "channel_INA_ADC" 9 94 "4" "channel 4 INPUT VOLTAGE MONITORING 1"
D G "channel_INB_ADC" 9 95 "0" "channel 0 INPUT VOLTAGE MONITORING 2"
D G "pin_BOOST1" 9 99 "PIN_D0" "BOOST SWITCH"
D G "pin_BOOST2" 9 100 "PIN_F1" "BOOST SWITCH"
D G "pin_CHRG_STAT1" 9 101 "PIN_J7"
D G "pin_FAULT_STAT1" 9 102 "PIN_J6"
D G "pin_CHRG_STAT2" 9 103 "PIN_J4"
D G "pin_FAULT_STAT2" 9 104 "PIN_J5"
F N "rda2_isr" 10 5 ""
F G "rda2_isr" 10 5 "void()" `1399 
C L "rda2_isr" 10 8 1 "FUNCTION"
F N "clear_InterruptUSB" 10 11 ""
F G "clear_InterruptUSB" 10 11 "void()" `1400  "InterruptUSB_Rxd[0]='\0';"
F N "getDataFromUSB" 10 19 ""
F G "getDataFromUSB" 10 19 "void()" `1402 
C L "getDataFromUSB" 10 8 1 "FUNCTION"
C L "rda_isr" 11 1 1 "FUNCTION"
F N "rda_isr" 11 4 ""
F G "rda_isr" 11 5 "void()" `1403 
C L "rda_isr" 11 1 1 "FUNCTION"
F N "clear_InterruptGSM" 11 11 ""
F G "clear_InterruptGSM" 11 12 "void()" `1404 
V L "i" 11 13 "int8" `1405 
F N "getDataFromGSM" 11 26 ""
F G "getDataFromGSM" 11 27 "void()" `1406 
C L "getDataFromGSM" 11 1 1 "FUNCTION"
C L "GetResponse" 11 1 7 "FUNCTION"
F N "GetResponse" 11 43 ""
F G "GetResponse" 11 44 "*int8()" `1407 
V L "tempCntr" 11 45 "int8" `1408 
V L "i" 11 46 "int8" `1409 
V L "len" 11 46 "int8" `1410 
C L "GetResponse" 11 1 1 "FUNCTION"
C L "GetResponse" 11 1 1 "FUNCTION"
C L "GetResponse" 11 1 1 "FUNCTION"
C L "GetResponse" 11 1 6 "FUNCTION"
C L "GetResponse" 11 1 1 "FUNCTION"
F N "ext_isr1" 12 3 ""
F G "ext_isr1" 12 4 "void()" `1414 
V G "InterruptInput2_Flag" 13 1 "int1" `1415 
F N "ext_isr2" 13 4 ""
F G "ext_isr2" 13 5 "void()" `1416  "if (input(PIN_B0))"
C L "ext_isr2" 13 6 1 "FUNCTION"
C L "ext_isr2" 13 6 1 "FUNCTION"
D G "LED_OFF" 14 1 "0"
D G "LED_GREEN" 14 2 "1"
D G "LED_RED" 14 3 "2"
F N "ledConfig" 14 5 ""
V L "mode" 14 5 "int8" `1418 
F G "ledConfig" 14 6 "void(int8 mode)" `1417 
C L "ledConfig" 14 15 1 "FUNCTION"
F N "ledToggle" 14 24 ""
V L "color" 14 24 "int8" `1420 
F G "ledToggle" 14 25 "void(int8 color)" `1419 
V L "toggle" 14 26 "int1" `1421 
C L "initLTE" 0 32 1 "FUNCTION"
F N "initLTE" 15 1 ""
F G "initLTE" 15 1 "void()" `1422 
F N "signalLTE" 15 11 ""
F G "signalLTE" 15 11 "*int8()" `1431 
V L "signal" 15 12 "*int8" `1432 
C L "signalLTE" 15 13 1 "FUNCTION"
C L "signalLTE" 15 13 1 "FUNCTION"
C L "signalLTE" 15 13 1 "FUNCTION"
F N "sendToLTE" 15 24 ""
V L "msg" 15 24 "*int8" `1435 
F G "sendToLTE" 15 24 "void(*int8 msg)" `1434 
F N "relayOFF" 15 33 ""
F G "relayOFF" 15 33 "void()" `1442 
F N "relayON" 15 41 ""
F G "relayON" 15 41 "void()" `1445 
F N "igtLTE" 15 50 ""
F G "igtLTE" 15 50 "void()" `1448 
V G "INTERRUPTCHECKER" 16 7 "int8" `1454 
F N "IS_LEAP" 16 9 ""
V L "YEAR" 16 9 "int8" `1456 
F G "IS_LEAP" 16 10 "int8(int8 YEAR)" `1455 
V L "year_" 16 11 "int16" `1457 
F N "TIMER1_isr" 16 22 ""
F G "TIMER1_isr" 16 23 "void()" `1458 
C L "TIMER1_isr" 16 1 2 "FUNCTION"
D G "RTC_I2C_ADDR_2129" 17 1 "81"
D G "RTC_I2C_ADDR_8523" 17 2 "104"
D G "RTC_CONTROL1_REG" 17 3 "0x00"
D G "RTC_CONTROL2_REG" 17 4 "0x01"
D G "RTC_CONTROL3_REG" 17 5 "0x02"
D G "RTC_SEC_REG" 17 7 "0x03"
D G "RTC_MIN_REG" 17 8 "0x04"
D G "RTC_HOUR_REG" 17 9 "0x05"
D G "RTC_DATE_REG" 17 10 "0x06"
D G "RTC_WEEKDAY_REG" 17 11 "0x07"
D G "RTC_MONTH_REG" 17 12 "0x08"
D G "RTC_YEAR_REG" 17 13 "0x09"
F N "get_ack_status" 17 16 ""
V L "address" 17 16 "int8" `1460 
F G "get_ack_status" 17 17 "int8(int8 address)" `1459 
V L "status" 17 18 "int8" `1461 
C L "get_ack_status" 17 21 1 "FUNCTION"
F N "rtcGetEpochDate" 17 30 ""
V L "YEAR" 17 30 "int32" `1463 
V L "MONTH" 17 30 "int8" `1464 
V L "DAY" 17 30 "int8" `1465 
F G "rtcGetEpochDate" 17 31 "int32(int32 YEAR,int8 MONTH,int8 DAY)" `1462 
C L "rtcGetEpochDate" 17 21 1 "FUNCTION"
V L "m" 17 38 "int8" `1466 
F N "rtcAssignWeekday" 17 45 ""
V L "years" 17 45 "int32" `1471 
V L "months" 17 45 "int8" `1472 
V L "days" 17 45 "int8" `1473 
F G "rtcAssignWeekday" 17 46 "int8(int32 years,int8 months,int8 days)" `1470 
V L "NrOfDay" 17 47 "int32" `1474 
V L "weekday" 17 48 "int8" `1475 
C L "rtcAssignWeekday" 17 21 2 "FUNCTION"
F N "rtcBCDToDec" 17 56 ""
V L "val" 17 56 "int8" `1477 
F G "rtcBCDToDec" 17 57 "int8(int8 val)" `1476 
F N "rtcDecToBCD" 17 61 ""
V L "val" 17 61 "int8" `1479 
F G "rtcDecToBCD" 17 62 "int8(int8 val)" `1478 
C L "readRtc" 17 21 48 "FUNCTION"
F N "readRtc" 17 127 ""
C L "readRtc" 17 21 1 "FUNCTION"
F G "readRtc" 17 128 "*int8()" `1480 
V L "seconds" 17 129 "int8" `1481 
V L "minutes" 17 130 "int8" `1482 
V L "hours" 17 131 "int8" `1483 
V L "days" 17 132 "int8" `1484 
V L "months" 17 133 "int8" `1485 
V L "years" 17 134 "int8" `1486 
V L "strDateTime" 17 136 "int8[20]" `1487 
V L "status" 17 137 "int8" `1488 
V L "data" 17 138 "int8[8]" `1489 
V L "i" 17 139 "int8" `1490 
C L "readRtc" 17 21 1 "FUNCTION"
C L "readRtc" 17 21 1 "FUNCTION"
C L "readRtc" 17 21 17 "FUNCTION"
F N "configI2C" 17 193 ""
V L "param1" 17 193 "int8" `1497 
V L "param2" 17 193 "int8" `1498 
F G "configI2C" 17 194 "void(int8 param1,int8 param2)" `1496 
C L "configI2C" 17 21 1 "FUNCTION"
F N "setRtc" 17 202 ""
V L "input" 17 202 "*int8" `1500 
F G "setRtc" 17 203 "void(*int8 input)" `1499 
V L "seconds" 17 204 "int8" `1501 
V L "minutes" 17 205 "int8" `1502 
V L "hours" 17 206 "int8" `1503 
V L "days" 17 207 "int8" `1504 
V L "months" 17 208 "int8" `1505 
V L "years" 17 209 "int8" `1506 
V L "temp" 17 211 "int8[20]" `1507 
V L "tempx" 17 212 "int8[3]" `1508 
V L "ptr" 17 213 "*int8" `1509 
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
C L "setRtc" 17 21 1 "FUNCTION"
F N "counterNewYear" 18 1 ""
F G "counterNewYear" 18 2 "void()" `1512 
V L "ptr" 18 3 "*int8" `1513 
V L "temp" 18 4 "int8[20]" `1514 
C L "counterNewYear" 18 20 1 "FUNCTION"
F N "convertDateParam" 18 37 ""
V L "param" 18 37 "int8" `1529 
F G "convertDateParam" 18 38 "*int8(int8 param)" `1528 
V L "funcSmallStr" 18 39 "*int8" `1530  "fprintf (USB,"param %i\n", param);"
C L "convertDateParam" 18 20 2 "FUNCTION"
F N "getMcuDateTime" 18 54 ""
C L "getMcuDateTime" 18 20 2 "FUNCTION"
F G "getMcuDateTime" 18 57 "*int8()" `1536  "!   char strDateTime[20] ={};"
C L "getMcuDateTime" 18 20 1 "FUNCTION"
V L "charx" 18 60 "int8" `1537 
V L "ptr" 18 61 "*int8" `1538 
C L "getMcuDateTime" 18 20 3 "FUNCTION"
C L "getMcuDateTime" 18 20 3 "FUNCTION"
C L "getMcuDateTime" 18 20 4 "FUNCTION"
C L "getMcuDateTime" 18 20 3 "FUNCTION"
C L "getMcuDateTime" 18 20 3 "FUNCTION"
C L "getMcuDateTime" 18 20 3 "FUNCTION"
C L "getMcuDateTime" 18 20 3 "FUNCTION"
F N "updateMcuDateTime" 18 107 ""
V L "ptx" 18 107 "*int8" `1540  "converts strings to integer and change date and time values"
F G "updateMcuDateTime" 18 108 "void(*int8 ptx)" `1539 
V L "dataz" 18 109 "*int8" `1541 
V L "temp1" 18 110 "int8[20]" `1542 
V L "tempx" 18 111 "int8[3]" `1543 
C L "updateMcuDateTime" 18 20 1 "FUNCTION"
C L "updateMcuDateTime" 18 20 1 "FUNCTION"
C L "updateMcuDateTime" 18 20 1 "FUNCTION"
C L "updateMcuDateTime" 18 20 1 "FUNCTION"
F N "rtc_acquire_sync" 18 152 ""
F G "rtc_acquire_sync" 18 153 "void()" `1546 
V L "ptr" 18 153 "*int8" `1547 
V L "temp" 18 154 "int8[20]" `1548 
C L "rtc_acquire_sync" 18 20 1 "FUNCTION"
C L "rtc_acquire_sync" 18 20 5 "FUNCTION"
C L "debugMenu" 18 20 13 "FUNCTION"
C L "debugMenu" 19 1 1 "FUNCTION"
F N "debugMenu" 19 3 ""
F G "debugMenu" 19 4 "void()" `1550  "fprintf(USB,"\n    FIRMWARE VERSION: %s\n",FIRMWARE);"
C L "debugMenu" 19 1 1 "FUNCTION"
C L "debugMenu" 19 1 1 "FUNCTION"
C L "debugMenu" 19 1 1 "FUNCTION"
C L "debugMenu" 19 1 5 "FUNCTION"
C L "debugMenu" 19 1 1 "FUNCTION"
C L "debugMenu" 19 1 3 "FUNCTION"
F N "debugDetails" 19 43 ""
F G "debugDetails" 19 44 "int8()" `1571 
V L "yy" 19 45 "int16" `1572 
V L "exit_" 19 47 "int1" `1573 
V L "debugDataInquire" 19 48 "int8[50]" `1574 
V L "passwordx" 19 49 "int8[15]" `1575 
V L "strx" 19 51 "int8[20]" `1576 
V L "spacex" 19 52 "int8[2]" `1577 
V L "temp" 19 53 "int8[20]" `1578 
V L "ptrx" 19 55 "*int8" `1579  "strcpy(funcReturnVar,"");"
C L "debugDetails" 19 1 2 "FUNCTION"
C L "debugDetails" 19 1 1 "FUNCTION"
C L "debugDetails" 19 1 1 "FUNCTION"
C L "debugDetails" 19 1 8 "FUNCTION"
C L "debugDetails" 19 1 17 "FUNCTION"
C L "crc_generator" 19 1 23 "FUNCTION"
F N "crc_generator" 20 2 ""
V L "data" 20 2 "*int8" `1585 
V L "len" 20 2 "int16" `1586 
F G "crc_generator" 20 2 "int16(*int8 data,int16 len)" `1584 
V L "i" 20 3 "int16" `1587 
V L "crc" 20 4 "int16" `1588 
V L "crc_string" 20 5 "int8[6]" `1589 
C L "crc_generator" 20 12 2 "FUNCTION"
C L "crc_generator" 20 12 2 "FUNCTION"
D G "RS485_DE" 21 1 "PIN_E5"
D G "RS485_RE" 21 2 "PIN_E6"
F N "disable485" 21 4 ""
F G "disable485" 21 4 "void()" `1590 
F N "writeToRS485" 21 9 ""
F G "writeToRS485" 21 9 "void()" `1591 
F N "readFromRS485" 21 14 ""
F G "readFromRS485" 21 14 "void()" `1592 
F N "mcuStatusOnStartUp" 0 49 ""
F G "mcuStatusOnStartUp" 0 49 "void()" `1593 
V L "strx" 0 50 "int8[20]" `1594 
C L "mcuStatusOnStartUp" 0 40 1 "FUNCTION"
V L "message" 0 52 "int8[40]" `1595 
V L "cause" 0 53 "int8" `1596 
C L "mcuStatusOnStartUp" 0 40 1 "FUNCTION"
C L "mcuStatusOnStartUp" 0 40 2 "FUNCTION"
C L "mcuStatusOnStartUp" 0 40 1 "FUNCTION"
C L "mcuStatusOnStartUp" 0 40 1 "FUNCTION"
C L "mcuStatusOnStartUp" 0 40 1 "FUNCTION"
C L "mcuStatusOnStartUp" 0 40 2 "FUNCTION"
C L "mcuStatusOnStartUp" 0 40 2 "FUNCTION"
F N "MAIN" 0 97 ""
F G "MAIN" 0 97 "void()" `1607 
V L "dbg" 0 98 "int8[6]" `1608 
V L "reset" 0 99 "int8[6]" `1609 
V L "tmp1" 0 101 "int8" `1610  "int byteCount;"
V L "message" 0 104 "int8[255]" `1611 
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 2 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 2 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 4 "FUNCTION"
C L "MAIN" 0 40 2 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 3 "FUNCTION"
C L "MAIN" 0 40 2 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 5 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 3 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
C L "MAIN" 0 40 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "read_external_memory" 3 0
F B "write_external_memory" 3 0
F B "setup_external_memory" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "output_h" 1 0
F B "output_j" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "input_h" 0 0
F B "input_j" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "set_tris_h" 1 0
F B "set_tris_j" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "get_tris_h" 0 0
F B "get_tris_j" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "input_change_h" 0 0
F B "input_change_j" 0 0
F B "port_b_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "port_j_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_timer_8" 3 0
F B "get_timer8" 0 0
F B "set_timer8" 1 0
F B "setup_timer_10" 3 0
F B "get_timer10" 0 0
F B "set_timer10" 1 0
F B "setup_timer_7" 1 0
F B "get_timer7" 0 0
F B "set_timer7" 1 0
F B "setup_timer_12" 3 0
F B "get_timer12" 0 0
F B "set_timer12" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_ccp6" 1 0
F B "set_pwm6_duty" 1 0
F B "setup_ccp7" 1 0
F B "set_pwm7_duty" 1 0
F B "setup_ccp8" 1 0
F B "set_pwm8_duty" 1 0
F B "setup_ccp9" 1 0
F B "set_pwm9_duty" 1 0
F B "setup_ccp10" 1 0
F B "set_pwm10_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 3 0
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "spi_xfer" 0 3
F B "spi_transfer" 3 4
F B "spi_transfer_write" 2 3
F B "spi_transfer_read" 2 3
F B "spi_speed" 1 3
F B "spi_init" 1 2
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_write_slave" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_transfer" 3 6
F B "i2c_transfer_out" 3 4
F B "i2c_transfer_in" 3 4
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
